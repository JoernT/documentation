<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng"
        schematypens="http://relaxng.org/ns/structure/1.0"?><?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" type="application/xml"
        schematypens="http://purl.oclc.org/dsdl/schematron"?>
<article xmlns="http://docbook.org/ns/docbook" version="5.0">
   <info>
      <title>Versioning Extensions</title>
      <date>September 2009</date>
      <keywordset>
         <keyword>TBD</keyword>
      </keywordset>
   </info>

   <!-- ================================================================== -->

   <sect1>
      <title>Abstract</title>

      <para>Since release 1.4, eXist-db provides a basic document versioning extension. The
                extension will track all changes to a document by storing a diff between the
                revisions. Older versions can be restored on the fly and even queried in memory.
                There's also basic support to detect and intercept conflicting writes.</para>
      <para>However, eXist-db has no control over the client. It does not know where a document
                update comes from and cannot directly communicate with the user. The versioning
                extension should be seen more like a toolbox than a complete solution. Advanced
                functionality (e.g. merging and conflict resolution) will require support from the
                end-user applications, which is outside of eXist's reach.</para>
      <para>The versioning extension has been created with human editors in mind, who will 
                typically be changing a document through an editor or some form-based frontend.
                It should work well with documents up to several megabytes in size. 
                However, the versioning will not track machine-generated node-level edits using XUpdate or XQuery 
                update extensions.</para>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Components</title>

      <para>The versioning extensions consist of the following components:</para>
      <variablelist spacing="compact">
         <varlistentry>
            <term>VersioningTrigger</term>
            <listitem>
               <para>a trigger which has to be registered with a collection and
                        implements the core versioning functionality</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>VersioningFilter</term>
            <listitem>
               <para>a serialization filter which adds special version attributes to every
                            serialized document. The attributes are used to detect conflicting writes.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>
                        <literal>versioning.xqm</literal>
                    </term>
            <listitem>
               <para>an XQuery module which provides a function library for end-user
                            applications, including functions like v:doc (used to
                            restore a given revision on the fly).</para>
            </listitem>
         </varlistentry>
      </variablelist>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Setup</title>

      <para>Versioning can be enabled for any collection in the collection hierarchy. It
                is not necessary to use versioning for all collections. To enable versioning,
                a trigger has to be registered with the top-level collection. This is done
                through the same collection configuration files that are used for defining
                indexes.</para>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

      <sect2>
         <title>Register the versioning trigger</title>

         <para>To enable version for a collection, you have to edit the
                collection's <literal>.xconf</literal> configuration file, which has to be 
                stored below the <literal>/db/system/config</literal> collection. As described
                in the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="indexing.xml">Configuring Indexes</link> document, the
                <literal>/db/system/config</literal> collection mirrors the hierarchical
                structure of the main collection tree.</para>
         <para>Within the collection's <literal>.xconf</literal>, you should register
                    the trigger class <literal>org.exist.versioning.VersioningTrigger</literal>
                    for the "create", "update", "delete", "copy" and "move" events:</para>
         <example>
            <title>Registering trigger in collection.xconf</title>
            <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-1.xml"/>
         </example>
         <para>If you store above document into <literal>/db/system/config/db/collection.xconf</literal>,
                it will enable versioning for the entire database.</para>
         <note>
            <para>Note that a <literal>collection.xconf</literal> at a lower level in the hierarchy will
                        <emphasis>overwrite</emphasis> any configuration on higher levels, including the
                        trigger definitions. Triggers are not inherited from ancestor configurations. If the 
                        new configuration doesn't define a trigger, the trigger map will be empy.</para>
            <para>When working with nested collection configurations,
                        you need to make sure that the trigger definitions are present in all
                        <literal>collection.xconf</literal> files.</para>
         </note>
         <para>VersioningTrigger accepts one
                    parameter, <literal>overwrite</literal>: if this is set to "no", the trigger will
                    check for potential write conflicts. For example, if two users opened the same
                    document and are editing it, it may happen that the first user saves his changes
                    without the second user recognizing it. The second user also made changes and if
                    eXist did allow him to store his version, he would just overwrite the modifications
                    already committed by the first user.</para>
         <para>The <literal>overwrite="no"</literal> setting
                    prevents this. However, eXist has no control over the client. It does not know
                    where the conflicting document came from. All it can do is to reject the write
                    attempt and raise an error. The error should then be handled by the client.
                    Right now there are no clients to support this. More work will be required
                    in this area. However, clients can already use the supplied XQuery functions to
                    check for write conflicts (see below).</para>
      </sect2>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

      <sect2>
         <title>Enabling the serialization filter</title>

         <para>In order to detect conflicting writes, the versioning extension needs
                    to keep track of the base revision to which changes were applied. It does this
                    by inserting special metadata attributes into a document when it is retrieved
                    from the database. For this purpose, a <emphasis>custom filter</emphasis> has
                    to be registered with eXist's serializer. This is done in the <tag>serializer</tag>
                    section in the main configuration file, <literal>conf.xml</literal>. Add a
                    <tag>custom-filter</tag> child tag to the <tag>serializer</tag>
                    element and set its <literal>class</literal> attribute to 
                    <literal>org.exist.versioning.VersioningFilter</literal>:</para>
         <example>
            <title>Registering the versioning filter in conf.xml</title>
            <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-2.xml"/>
         </example>
         <para>eXist needs to be restarted for the versioning filter to become active.</para>
      </sect2>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Checking versions through the admin webapp</title>

      <note>
         <para>This part of the documentation does not reflect the current state of the software. The old
                HTML admin interface has been removed meaning that the versioning panels mentioned in the documentention below
                are removed too.
            </para>
      </note>
      <para>The admin web application provides a simple way to see the revision history of a
                document and restore old versions. From the sidebar menu, select 
                <literal>Browse Collections</literal>. Within the collection view
                you should find a revision number next to each document which has been changed
                since versioning was enabled. Unchanged documents will not have a revision number:</para>
      <informalfigure>
         <mediaobject>
            <imageobject>
               <imagedata fileref="assets/versioning1.png"/>
            </imageobject>
         </mediaobject>
      </informalfigure>
      <para>The revision number is the last number in each row ("34" in the screenshot above).
            You can click on the revision number to see the history of changes for this document:</para>
      <informalfigure>
         <mediaobject>
            <imageobject>
               <imagedata fileref="assets/versioning2.png"/>
            </imageobject>
         </mediaobject>
      </informalfigure>
      <para>Clicking on <literal>Diff</literal> shows the differences between the selected
                and the previous revision. The way in which the differences are recorded is specific
                to eXist. It uses eXist's unique node ids to identify the reference node to which a change
                applies (the <literal>ref</literal> attributes in the XML shown above).</para>
      <para>The <literal>Restore</literal> link will restore the corresponding revision.
                This is done in memory by recursively applying all diffs since the base revision.</para>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Accessing the versioning information</title>

      <para>The versioning extension uses the collection <literal>/db/system/versions</literal>
                to store base revisions and diffs. The collection hierarchy below <literal>/db/system/versions</literal>
                again mirrors the main collection tree. For each versioned resource, you will find a
                document with suffix <literal>.base</literal>, which contains the base revision, i.e. the
                first version of the document. Each revision is stored in a document which starts with the
                original document name and ends with the revision number, e.g. 
                <literal>hamlet.xml.35</literal>:</para>
      <informalfigure>
         <mediaobject>
            <imageobject>
               <imagedata fileref="assets/versioning3.png"/>
            </imageobject>
         </mediaobject>
      </informalfigure>
      <para>Like the admin webapp, you can use XQuery functions to access the revision history
                or restore a given revision. eXist provides a single XQuery module for that. For
                example, to view the history of a resource, use the following query:</para>
      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xquery" xlink:href="listings/listing-3.txt"/>
      <para>This should return an XML fragment like the following:</para>
      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-4.txt"/>
      <para>The most important function is <literal>v:doc</literal>, which is used
            to restore an arbitrary revision of a document on the fly. You can use this
            function similar to the standard <literal>fn:doc</literal> to query the revision.
            For example:</para>
      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xquery" xlink:href="listings/listing-5.txt"/>
      <para>This will restore revision 35 of <literal>hamlet.xml</literal> and then find
                all <tag>SPEECH</tag> elements with a <tag>SPEAKER</tag> called 
                "HAMLET". Please note that no indexes will be available to the query engine when
                processing a restore document.</para>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Detecting write conflicts</title>

      <para>To avoid that a user overwrites the changes made by another user, eXist
                needs to know upon which revision the user's changes are based. To make this
                possible, the versioning filter adds a number of metadata attributes to the
                root element of a document when it is serialized (e.g. to be opened in an editor).
                The inserted metadata attributes are all in a separate versioning namespace
                and will never be stored in the db. The following fragment shows the added
                attributes:</para>
      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-6.xml"/>
      <para>As described above ("Setup"), when eXist detects a potential write conflict,
                it cannot do more than to reject the update and raise an error. However, there's
                an XQuery function which can be used by clients to check if newer revisions exist.
                You pass it the revision number and the unique key as given in the versioning
                attributes of the document root element. If the function returns the empty sequence,
                no newer revisions exist in the database. Otherwise, the function returns the
                version documents of each newer revision.
            </para>
      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xquery" xlink:href="listings/listing-7.txt"/>
      <para>Once you made sure that you really want to store the document and overwrite the
                other revisions, simply remove the version attributes from the root element.</para>
      <para>Future releases of the versioning extension may provide a more advanced
                conflict handling, including an automatic merge of non-conflicting changes.</para>
   </sect1>
</article>