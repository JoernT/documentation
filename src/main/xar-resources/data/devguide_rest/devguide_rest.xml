<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng"
        schematypens="http://relaxng.org/ns/structure/1.0"?><?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" type="application/xml"
        schematypens="http://purl.oclc.org/dsdl/schematron"?>
<article xmlns="http://docbook.org/ns/docbook" version="5.0">
   <info>
      <title>Developer's Guide</title>
      <date>September 2009</date>
      <keywordset>
         <keyword>TBD</keyword>
      </keywordset>
   </info>

   <!-- ================================================================== -->

   <sect1 xml:id="rest">
      <title>REST-Style Web API</title>

      <para>eXist-db provides a REST-style (or <emphasis>RESTful</emphasis>) API through HTTP,
                which provides the simplest and quickest way to access the database. To implement
                this API, all one needs is an HTTP client, which is provided by nearly all
                programming languages and environments. However, not all of the database features
                are available using this approach.</para>
      <para> When running eXist-db as a stand-alone server - i.e. when the database has been
                started using the shell-script <literal>bin/server.sh</literal> (Unix) or batch
                file <literal>bin/server.bat</literal> (Windows/DOS) - HTTP access is supported
                through a simple, built-in web server. This web server however has limited
                capabilities restricted to the basic operations defined by eXist's REST API (e.g.
                    <literal>GET</literal>, <literal>POST</literal>, <literal>PUT</literal> and ,
                    <literal>DELETE</literal>).</para>
      <para>When running in a servlet-context, this same server functionality is provided by
                the <literal>EXistServlet</literal>. In the standard eXist distribution,
                this servlet is configured to have a listen address at:</para>
      <programlisting>http://localhost:8080/exist/rest/</programlisting>
      <para>Both the stand-alone server and the servlet rely on Java class
                    <literal>org.exist.http.RESTServer</literal> to do the actual work.</para>
      <para>The server treats all HTTP request paths as paths to a database collection, i.e.
                all resources are read from the database instead of the file system. Relative paths
                are therefore resolved relative to the database root collection. For example, if you
                enter the following URL into your web-browser:</para>
      <programlisting>http://localhost:8080/exist/rest/db/shakespeare/plays/hamlet.xml</programlisting>
      <para>the server will receive an HTTP GET request for the resource
                <literal>hamlet.xml</literal> in the collection
                <literal>/db/shakespeare/plays</literal> in the database. The server will look for
                this collection, and check if the resource is available, and if so, retrieve its
                contents and send them back to the client. If the document does not exist, an
                    <emphasis>HTTP 404 (Not Found)</emphasis> status response will be returned.</para>
      <para>To keep the interface simple, the basic database operations are directly mapped to
                HTTP request methods wherever possible. The following request methods are supported:</para>
      <variablelist spacing="compact">
         <varlistentry>
            <term>GET</term>
            <listitem>
               <para>Retrieves a representation of the resource or collection from the
                            database. XQuery and XPath queries may also be specified using GET's
                            optional parameters applied to the selected resource.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>PUT</term>
            <listitem>
               <para>Uploads a resource onto the database. If required, collections are
                            automatically created, and existing resources are overwritten.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>DELETE</term>
            <listitem>
               <para>Removes a resource (document or collection) from the database.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>POST</term>
            <listitem>
               <para>Submits data in the form of an XML fragment in the content of the
                            request which specifies the action to take. The fragment can be either
                            an XUpdate document or a query request. Query requests are used to pass
                            complex XQuery expressions too large to be URL-encoded.</para>
            </listitem>
         </varlistentry>
      </variablelist>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

      <sect2>
         <title>HTTP Authentication</title>

         <para>The REST server and servlet support basic HTTP authentication, and only valid
                    users can access the database. If no username and password are specified, the
                    server assumes a "guest" user identity, which has limited capabilities. If the
                    username submitted is not known, or an incorrect password is submitted, an error
                    page (Status code 403 - Forbidden) is returned.</para>
      </sect2>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

      <sect2>
         <title>GET Requests</title>

         <para>If the server receives an HTTP GET request, it first tries to locate known
                    parameters. If no parameters are given or known, it will try to locate the
                    collection or document specified in the URI database path, and return a
                    representation of this resource the client. Note that when the located resource
                    is XML, the returned <emphasis>content-type</emphasis> attribute value will be
                        <literal>application/xml</literal>, and for binary resources
                        <literal>application/octet-stream</literal>.</para>
         <para>If the path resolves to a database collection, the retrieved results are
                    returned as an XML fragment. An example fragment is shown below:</para>
         <example>
            <title>XML Results for GET Request for a Collection</title>
            <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-3.xml"/>
         </example>
         <para>If an <literal>xml-stylesheet</literal> processing instruction is found in an
                    XML document being requested, the database will try to apply the stylesheet
                    before returning the document. Note that in this case, any relative path in a
                    hypertext link will be resolved relative to the location of the source document.
                    For example, if the document <literal>hamlet.xml</literal>, which is stored in
                    collection <literal>/db/shakespeare/plays</literal> contains the XSLT
                    processing instruction:</para>
         <programlisting>&lt;?xml-stylesheet type="application/xml" href="shakes.xsl"?&gt;</programlisting>
         <para>then the database will try to load the stylesheet from
                        <literal>/db/shakespeare/plays/shakes.xsl</literal> and apply it to the
                    document.</para>
         <para>Optionally, GET accepts the following request parameters, which must be
                    URL-encoded:</para>
         <variablelist spacing="compact">
            <varlistentry>
               <term>_xsl=<emphasis>XSL Stylesheet</emphasis>
                        </term>
               <listitem>
                  <para>Applies an XSL stylesheet to the requested resource. If the
                                    <literal>_xsl</literal> parameter contains
                                an external URI, the corresponding external resource is retrieved.
                                Otherwise, the path is treated as relative to the database root
                                collection and the stylesheet is loaded from the database. This
                                option will override any XSL stylesheet processing instructions
                                found in the source XML file.</para>
                  <para>Setting <literal>_xsl</literal> to
                                <literal>no</literal> disables any stylesheet processing. This is
                                useful for retrieving the unprocessed XML from documents that have a
                                stylesheet declaration.</para>
                  <note>
                     <para>If your document has a valid XSL stylesheet declaration, the
                                web browser may still decide to apply the XSL. In this case, passing 
                                <literal>_xsl=no</literal> has no visible effect, though the XSL
                                is now rendered by the browser, <emphasis>not</emphasis> eXist.</para>
                  </note>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>_query=<emphasis>XPath/XQuery Expression</emphasis>
                        </term>
               <listitem>
                  <para>Executes a query specified by the request. The collection or
                                resource referenced in the request path is added to the set of
                                statically known documents for the query. </para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>_indent=<emphasis>yes | no</emphasis>
                        </term>
               <listitem>
                  <para>Returns indented pretty-print XML. The
                                default value is <literal>yes</literal>.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>_encoding=<emphasis>Character Encoding Type</emphasis>
                        </term>
               <listitem>
                  <para>Sets the character encoding for the resultant XML. The
                                default value is <literal>UTF-8</literal>.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>_howmany=<emphasis>Number of Items</emphasis>
                        </term>
               <listitem>
                  <para>Specifies the number of items to return from the resultant
                                sequence. The default value is <literal>10</literal>.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>_start=<emphasis>Starting Position in Sequence</emphasis>
                        </term>
               <listitem>
                  <para>Specifies the index position of the first item in the result
                                sequence to be returned. The default value is <literal>1</literal>.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>_wrap=<emphasis>yes | no</emphasis>
                        </term>
               <listitem>
                  <para>Specifies whether the returned query results are to be wrapped
                                into a surrounding <tag>exist:result</tag> element. The
                                default value is <literal>yes</literal>.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>_source=<emphasis>yes | no</emphasis>
                        </term>
               <listitem>
                  <para>Specifies whether the query should display its source code instead of being executed. The
                                default value is <literal>no</literal>, but see the <tag>allow-source</tag> section in <literal>descriptor.xml</literal>
                                to explicitely allow such a behaviour.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>_cache=<emphasis>yes | no</emphasis>
                        </term>
               <listitem>
                  <para>If set to "yes", the query results of the current query are stored
                            into a session on the server. A session id will be returned with the
                            response. Subsequent requests can pass this session id via the
                            <literal>_session</literal> parameter. If the server finds a valid session
                            id, it will return the cached results instead of re-evaluating the query.
                            For more info see below.
                            </para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>_session=<emphasis>session id</emphasis>
                        </term>
               <listitem>
                  <para>Specifies a session id returned by a previous query request.
                            If the session is valid, query results will be read from the
                            cached session.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>_release=<emphasis>session id</emphasis>
                        </term>
               <listitem>
                  <para>Release the session identified by the session id.</para>
               </listitem>
            </varlistentry>
         </variablelist>
         <para>EXAMPLE: The following URI will find all <tag>SPEECH</tag> elements in
                    the collection <literal>/db/shakespeare</literal> with "Juliet" as the
                        <tag>SPEAKER</tag>. As specified, it will return 5 items from the
                    result sequence, starting at position 3:</para>
         <programlisting>http://localhost:8080/exist/rest/db/shakespeare?_query=//SPEECH[SPEAKER=%22JULIET%22]&amp;_start=3&amp;_howmany=5</programlisting>
      </sect2>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

      <sect2>
         <title>PUT Requests</title>

         <para>Documents can be stored or updated using an HTTP PUT request. The request URI
                    points to the location where the document will be stored. As defined by the HTTP
                    specifications, an existing document at the specified path will be updated, i.e.
                    removed, before storing the new resource. As well, any collections defined in
                    the path that do not exist will be created automatically.</para>
         <para>For example, the following Python script stores a document (the name of which
                    is specified on the command-line) in the database collection
                    <literal>/db/test</literal>, which will be created if this collection does not
                    exist. Note that the HTTP header field <literal>content-type</literal> is
                    specified as <literal>application/xml</literal>, since otherwise the document is stored
                    as a binary resource.</para>
         <example>
            <title>PUT Example using Python (See: samples/http/put.py)</title>
            <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="java" xlink:href="listings/listing-6.txt"/>
         </example>
      </sect2>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

      <sect2>
         <title>DELETE Requests</title>

         <para>DELETE removes a collection or resource from the database. For this, the
                    server first checks if the request path points to an existing database
                    collection or resource, and once found, removes it.</para>
      </sect2>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

      <sect2>
         <title>POST Requests</title>

         <para>POST requests require an XML fragment in the content of the request, which
                    specifies the action to take.</para>
         <para>If the root node of the fragment uses the XUpdate namespace
                        (<literal>http://www.xmldb.org/xupdate</literal>), the fragment is sent to
                    the XUpdateProcessor to be processed. Otherwise, the root node will have the
                    namespace for eXist requests
                    (<literal>http://exist.sourceforge.net/NS/exist</literal>), in which case the
                    fragment is interpreted as an <emphasis>extended query request</emphasis>.
                    Extended query requests can be used to post complex XQuery scripts that are too
                    large to be encoded in a GET request.</para>
         <para>The structure of the POST XML request is as follows:</para>
         <example>
            <title>Extended Query Request</title>
            <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-7.xml"/>
         </example>
         <para>The root element <literal>query</literal> identifies the fragment as an extended
                    query request, and the XQuery expression for this request is enclosed in the
                    <literal>text</literal> element. The start, max, cache and session-id attributes
                    have the same meaning as the corresponding GET parameters. Optional output properties, such as
                    pretty-print, may be passed in the <literal>properties</literal> element. An
                    example of POST for Perl is provided below:</para>
         <example>
            <title>POST Example using Perl (See: samples/http/search.pl)</title>
            <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="java" xlink:href="listings/listing-8.txt"/>
         </example>
         <note>
            <para>Please note that you may have to enclose the XQuery expression in a CDATA
                        section (i.e. &lt;![CDATA[ ... ]]&gt;) to avoid parsing errors (this
                        is not shown above).</para>
         </note>
         <para>The returned query results are enclosed in the <tag>exist:result</tag>
                    element, which are shown below for the above example:</para>
         <example>
            <title>Returned Results for POST Request</title>
            <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-9.xml"/>
         </example>
      </sect2>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

      <sect2>
         <title>Calling Stored XQueries</title>

         <para>The REST interface supports stored XQueries on the server: if the target
                resource of a GET or POST request is a binary resource with the mime-type
                <literal>application/xquery</literal>, the REST server will try to compile and
                execute it as an XQuery. The XQuery has access to the entire HTTP context, including
                parameters and session attributes.</para>
         <para>Stored XQueries are a good way to provide dynamic
                views on the data or create small services. However, they can do more: 
                since you can also store binary resources like
                images, CSS stylesheets or Javascript files into a database collection, it is
                easily possible to serve a complex application entirely out of the database.
                </para>
         <para>Please have a look at the example 
                <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://demo.exist-db.org/exist/apps/demo/examples/web/index.html">Using XQuery for Web Applications</link> 
                on the demo server.</para>
      </sect2>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

      <sect2>
         <title>Cached Query Results</title>

         <para>When executing queries using GET or POST, the server can cache query results
                in a server-side session. The results are cached in memory. In general, memory
                consumption will be low for query results which reference nodes stored in the
                database. It is high for nodes constructed within the XQuery itself.</para>
         <para>To create a session and store query results into it, pass parameter
                <literal>_cache=yes</literal> with a GET request or set attribute
                <literal>cache="yes"</literal> within the XML payload of a POST query request.
                The server will execute the query as usual. If the result sequence contains
                more than one item, the entire sequence will be stored into a newly created 
                session.</para>
         <para>The id of the created session is included with the response. For requests
                which return a <tag>exist:result</tag> wrapper element, the session id
                will be specified in the <literal>exist:session</literal> attribute. The session
                id is also available in the HTTP header <literal>X-Session-Id</literal>. The
                following example shows the header and <tag>exist:result</tag>
                tag returned by the server:</para>
         <example>
            <title>Sample Response</title>
            <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="listings/listing-10.txt"/>
         </example>
         <para>The session id can then be passed with subsequent requests to retrieve
                further chunks of data without re-evaluating the query. For a GET request, pass
                the session id with parameter <literal>_session</literal>. For a POST request,
                add an attribute <literal>session="sessionId"</literal> to the XML content of the
                request.</para>
         <para>If the session does not exist or has timed out, the server will simply
                re-evaluate the query. The timeout is set to 2 minutes.</para>
         <para>A session can be deleted by sending a GET request to an arbitrary collection
                url. The session id is passed in a parameter <literal>_release</literal>:</para>
         <programlisting>http://localhost:8080/exist/rest/db?_release=0</programlisting>
      </sect2>
   </sect1>
</article>