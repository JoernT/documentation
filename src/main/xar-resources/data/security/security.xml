<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng"
        schematypens="http://relaxng.org/ns/structure/1.0"?><?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" type="application/xml"
        schematypens="http://purl.oclc.org/dsdl/schematron"?>
<article xmlns="http://docbook.org/ns/docbook" version="5.0">
   <info>
      <title>Security</title>
      <date>October 2012</date>
      <keywordset>
         <keyword>TBD</keyword>
      </keywordset>
   </info>

   <!-- ================================================================== -->

   <sect1 xml:id="overview">
      <title>Overview</title>

      <para>This article discusses eXist-db's security features and how to manage
                authentication, users, groups, passwords, permissions, and access controls.
                eXist-db's security infrastructure is built on a Unix permissions model with a
                single internal authentication realm, with additional support for access control
                lists and authentication using multiple realms through a central security
                manager.</para>
   </sect1>

   <!-- ================================================================== -->

   <sect1 xml:id="security-manager">
      <title>Security Manager</title>

      <para>eXist-db has a central Security Manager which is configured by the file
                    <literal>/db/system/security/config.xml</literal>. This file, which is
                generated during database startup, defines what authentication realms are available
                to the Security Manager.</para>
      <para>This example Security Manager configuration file defines a URL to be used for
                authentication:</para>
      <example>
         <title>
                    <literal>/db/system/security/config.xml</literal>
                </title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-1.xml"/>
      </example>
      <para>The Security Manager also features an authentication event listener that you can
                configure to call a custom XQuery module on each authentication event. For example,
                this configuration file would pass authentication events to a module,
                    <literal>/db/security-events.xq</literal>, which performs actions when an
                authentication event occurs.</para>
      <example>
         <title>Excerpt of a sample <literal>/db/system/security/config.xml</literal>
                    illustrating configuration of the authentication event listener</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-2.txt"/>
      </example>
      <para>The XQuery module that receives the authentication events must be a library module
                in the <literal>http://exist-db.org/security/events</literal> namespace and must have a
                function called <literal>authentication()</literal>. This example sends a log
                message to the console.</para>
      <example>
         <title>A sample module handler for authentication events, <literal>/db/security-events.xq</literal>
                </title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xquery" xlink:href="listings/listing-3.txt"/>
      </example>
   </sect1>

   <!-- ================================================================== -->

   <sect1 xml:id="authentication-realms">
      <title>Authentication Realms</title>

      <para>eXist-db always has an internal authentication realm, but also supports multiple
                authentication realms. This allows you to add one or more external realms which
                provide user and group authentication for eXist-db.</para>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

      <sect2 xml:id="default-internal-realm">
         <title>Default Internal Realm</title>

         <para>The "eXist-db realm" is the default internal realm. By default this realm
                    handles the '<emphasis>SYSTEM</emphasis>', '<emphasis>admin</emphasis>' and
                        '<emphasis>guest</emphasis>' users and '<emphasis>DBA</emphasis>' and
                        '<emphasis>guest</emphasis>' groups. Any additional users or groups created
                    in eXist-db will be added to this realm.</para>
         <para>Every eXist-db realm user has an account with a username, password, and other 
                    metadata that is stored in the database. Each user may belong to zero or more
                    groups.</para>
         <para>User and group information for the eXist-db realm is maintained in the
                    collection <literal>/db/system/security/exist</literal>.</para>
         <important>
            <para>The security collections in /db/system/security should not be manually
                        manipulated or read, rather they should be accessed via the SecurityManager
                        class or the SecurityManager Module. Directly manipulation can lead to
                        inconsistent state and security issues.</para>
         </important>
         <para>The following is a sample user account document for "aretter" in
                    the eXist-db realm:</para>
         <example>
            <title>Account Document stored in <literal>/db/system/security/exist/accounts/aretter.xml</literal>
                    </title>
            <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-4.xml"/>
         </example>
         <para>As this example suggests, eXist-db does not store passwords in the clear, but
                    rather stores hashed values of the passwords (in base64 encoding). eXist-db uses
                    the <emphasis>RIPEMD-160</emphasis> cryptographic hashing algorithm. Whenever a
                    user supplies account credentials for authentication, the database applies
                    RIPEMD-160 hash to the supplied password and compares it to the hash stored in
                    the user's account document. Storing hashes of passwords is a best practice in
                    security that provides a strong layer of security compared to storing passwords
                    in the clear; the notion is that even if the hashed password is exposed to an
                    attacker, it is difficult to derive the original password from the hash.</para>
         <para>Note that the <literal>/db/system/security</literal> collection is (by
                    default) only readable and writable by the system or users in the <literal>dba</literal> group.
                    The <literal>dba</literal> group is specially reserved for database
                    administrators, and only <literal>dba</literal> users are allowed to create,
                    remove or modify other users.</para>
      </sect2>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

      <sect2 xml:id="ldap-realm">
         <title>LDAP Realm</title>

         <para>The LDAP Realm is enabled by default (in
                        <literal>extensions/build.properties</literal>,
                        <literal>include.feature.security.ldap</literal> is set to
                        <literal>true</literal>.) To use the LDAP realm, add an LDAP realm element to 
                    <literal>/db/system/security/config.xml</literal>, as in this example:</para>
         <example>
            <title>Sample <literal>/db/system/security/config.xml</literal> for
                        LDAP</title>
            <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-5.xml"/>
         </example>
         <para>Explanation of these elements:</para>
         <itemizedlist>
            <listitem>
               <para>The default-username and default-password elements are used to
                            communicate with the LDAP server if a non-LDAP user requests information
                            from LDAP server.</para>
            </listitem>
            <listitem>
               <para>The search-* elements are mapping for names.</para>
            </listitem>
            <listitem>
               <para>The metadata-search-attribute elements are used for mapping LDAP
                            account metadata onto eXist-db account metadata.</para>
            </listitem>
            <listitem>
               <para>The whitelist element contains allowed groups for authentication. The
                            blacklist element contains groups that are not allowed.</para>
            </listitem>
            <listitem>
               <para>The transformation element contains actions to be performed after
                            first authentication.</para>
            </listitem>
         </itemizedlist>
         <para>If the <literal>config.xml</literal> file is configured correctly, then you
                    should be able to authenticate by LDAP.</para>
      </sect2>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

      <sect2 xml:id="oauth-realm">
         <title>OAuth Realm</title>

         <para>Due to the variation in implementations across OAuth providers, eXist-db
                    developers have to create provider-specific Java libraries. eXist-db currently
                    supports only Facebook and Google for OAuth authentication (see <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://developers.facebook.com/docs/authentication/">Facebook
                        Authentication</link> and <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://developers.google.com/accounts/docs/OAuth2">Google's OAuth
                        documentation</link>.</para>
         <para>The OAuth Realm is not enabled by default in eXist-db. To enable the OAuth
                    realm, set the <literal>include.feature.security.oauth</literal> property to
                        <literal>true</literal> in
                        <literal>extensions/local.build.properties</literal>, and rebuild
                    eXist-db. Then edit web.xml and controller-config.xml to enable OAuthServlet. 
                    After startup eXist-db and add a realm element for OAuth to
                        <literal>/db/system/security/config.xml</literal>, as in this
                    example:</para>
         <example>
            <title>Sample <literal>/db/system/security/config.xml</literal> for
                        OAuth</title>
            <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-6.xml"/>
         </example>
         <para>Explanation of these elements:</para>
         <itemizedlist>
            <listitem>
               <para>Valid values for the service element's @provider attribute are 'facebook' and 'google'. </para>
            </listitem>
            <listitem>
               <para>@name unique (in database) name for application.</para>
               <para>@key and @secret should be given by OAuth provider.</para>
            </listitem>
         </itemizedlist>
         <para>If configured correctly, you should be able to authenticate by OAuth.</para>
      </sect2>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

      <sect2 xml:id="openid-realm">
         <title>OpenID Realm</title>

         <para>
                    <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://openid.net/">OpenID</link> is an authentication mechanism
	                where the identity of the user is maintained by trusted external providers. This
	                takes the burden in maintaining and securing passwords for users off of the eXist-db
	                database and on to the Identity Provider (IdP).
                </para>
         <para>
	                By default, the OpenID service is not built and thus is also not enabled.  To
	                recompile the source with OpenID enabled, edit local.build.properties in the
	                extensions directory and change the include.feature.security.openid property
	                from false to true.  Then recompile.
                </para>
         <example>
            <title>extensions/local.build.properties</title>
            <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="listings/listing-7.txt"/>
         </example>
         <para>
			        This extension compiles into <emphasis role="bold">
                        <emphasis role="italic">lib/extensions/exist-security-openid.jar</emphasis>
                    </emphasis>.
                    Run eXist-db with that jar should enable extension. To disable service remove the jar and restart eXist-db.
				</para>
      </sect2>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

      <sect2 xml:id="legacy-internal-realm">
         <title>Legacy Internal Realm</title>

         <para>Before eXist-db 2.0, the internal security realm was maintained in a different
                    manner. The details are included here for the purpose of informing decisions on
                    migration.</para>
         <para>Every eXist-db database user has an account with a username, password and other
                    information that is stored in the database. Furthermore, every user belongs to
                    one or more groups - and respectively, every resource in the database is owned
                    by a user and by a group. By default, the owner is set to the user who created
                    the resource, and his primary group, but eXist-db allows for different permissions
                    for the owner, the owner's group and others. However, only the owner of the
                    resource (or <literal>dba</literal> users) can change these
                    permissions.</para>
         <para>User and group information is found in the designated XML file
                        <literal>/db/system/users.xml</literal> located in collection
                        <literal>/db/system</literal>. This file is generated during database
                    startup. The following is a simple example of a <literal>users.xml</literal>
                    document: </para>
         <example>
            <title>
                        <literal>users.xml</literal> User Information</title>
            <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-8.xml"/>
         </example>
         <para>As we see from this example, passwords are encrypted using an
                        <emphasis>MD5</emphasis> algorithm (e.g. <literal>user-1</literal> has the
                        <emphasis>MD5</emphasis>-encrypted password
                    "7f0261c14d7d1b8e51680a013daa623e"). Therefore, whenever a user enters his or
                    her password, the database generates an MD5 encryption and compares it to the
                    encryption stored in <literal>users.xml</literal>. Since it is very difficult
                    for users to guess the original password from the MD5 string, passwords in eXist-db
                    should be sufficiently secure.</para>
         <para>Note that the <literal>/db/system</literal> collection is (by default) only
                    readable by <literal>dba</literal> users (although it is possible to make it
                    accessible by other users). The <literal>dba</literal> group is specially reserved
                    for database administrators, and only <literal>dba</literal> users are allowed to
                    create or remove users, or change permissions for other users.</para>
         <important>
            <para>By default, access to an eXist-db database is disabled until a password is
                        set for the administrator (see <emphasis>Changing the Administrator
                            Password</emphasis> below for instructions). Since
                            <literal>write</literal> permissions for files are granted to everyone, it
                        is important to be careful about how you configure server access for users
                        on a network or the Internet.</para>
         </important>
      </sect2>
   </sect1>

   <!-- ================================================================== -->

   <sect1 xml:id="changing-admin-password">
      <title>Changing the Administrator Password</title>

      <para>When the database is started for the first time, two default users are created:
                "admin" and "guest". (The "admin" user is a member of the <literal>dba</literal>
                group, and therefore has administrative privileges; the "guest" user is a member of
                the group "guest" and is not an administrator). At this initial point, the "admin"
                password is set to <literal>null</literal>, and so access to the database is
                    <emphasis>initially</emphasis> granted to everyone. To set restrictions on
                database access, you must first set a password for the "admin" user. To do this, use
                either the <emphasis>Admin Client</emphasis> or the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{dashboard}">User Manager</link> 
                in the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{dashboard}">Dashboard</link>. If eXist-db is used for applications
                intended for online web publications, or as an embedded library, it is exposed it to
                potential exploitation. It is therefore strongly advised that you first change the
                admin password.</para>
      <para>The Admin Client graphical user interface has a dialog box for user management. To
                open this dialog box, enter <literal>Ctrl-U</literal> or select
                    <literal>Tools</literal> » <literal>Edit users</literal>. A
                dialog box will appear, as shown here.</para>
      <informalfigure>
         <mediaobject>
            <imageobject>
               <imagedata fileref="assets/client-5.png"/>
            </imageobject>
         </mediaobject>
      </informalfigure>
      <orderedlist>
         <listitem>
            <para>At the top, select the "admin" user in the table of users</para>
         </listitem>
         <listitem>
            <para>Type in your password into the corresponding fields</para>
         </listitem>
         <listitem>
            <para>Click the "Modify User" button to apply the changes</para>
         </listitem>
      </orderedlist>
      <para>You can also set a new administrator password on the command line in a console or
                shell. Enter the following at the command prompt:</para>
      <example>
         <title>Setting an Administrator Password</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="listings/listing-9.txt"/>
      </example>
      <para>Now that the password is set, access control is enabled. To start the shell-mode client as an
                administrator, you must specify the <literal>-u</literal> option, following these
                steps:</para>
      <orderedlist>
         <listitem>
            <para>For Windows and Mac users, double-click on the desktop shortcut icon (if
                        created) or by selecting the shortcut icon from the start menu</para>
         </listitem>
         <listitem>
            <para>OR enter the following in a Unix shell or DOS/Windows command
                        prompt:</para>
            <programlisting>bin\client.bat -u admin (DOS/Windows)</programlisting>
            <programlisting>bin/client.sh -u admin (Unix)</programlisting>
         </listitem>
      </orderedlist>
      <para>The other default user, "guest", also has the password "guest". The guest identity
                is internally assigned to all clients that have not authenticated themselves. For
                example, the Xincon WebDAV interface does not support authentication, so "guest" is
                assumed for its users by default. Note that this aspect of WebDAV is a potential
                source of confusion, and you have to be careful about setting read/write permissions
                for this API.</para>
   </sect1>

   <!-- ================================================================== -->

   <sect1 xml:id="creating-users">
      <title>Creating Users</title>

      <para>It is easy to create new users using the Admin Client. In the <literal>Edit
                    users</literal> dialog box, fill in the <literal>Username</literal>,
                    <literal>Password</literal>, <literal>Password (repeat)</literal>, and
                    <literal>Home-collection</literal> fields, and assign a group (or groups) for the
                new user. Finally, select <literal>Create User</literal>. The new user will
                appear in the list of users in the top panel.</para>
      <para>The <literal>adduser</literal> command also allows you to create additional users.
                The command asks for a password and a list of groups to which the user should
                belong. An example is shown below:</para>
      <example>
         <title>Creating a New User</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="listings/listing-12.txt"/>
      </example>
      <para>To check that the user has been added, use the command <literal>users</literal> to
                display a list of all known database users.</para>
   </sect1>

   <!-- ================================================================== -->

   <sect1 xml:id="permissions">
      <title>Resource Permissions</title>

      <para>eXist-db has supports both a Unix like permissions model and simple Access Control
                Lists. It is important to understand the Unix permission model first, and then
                consider Access Control Lists, should the Unix Model not prove sufficient for your
                application.</para>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

      <sect2>
         <title>Unix Model</title>

         <para>The default that is based on the UNIX <emphasis role="bold">read</emphasis>,
                        <emphasis role="bold">write</emphasis> and <emphasis role="bold">execute</emphasis> flags for <emphasis role="bold">owner</emphasis>,
                        <emphasis role="bold">group</emphasis> and <emphasis role="bold">world</emphasis>. In versions prior to eXist-db 2.0, there was no <emphasis role="bold">execute</emphasis> flag, rather an <emphasis role="bold">update</emphasis> flag was present.</para>
         <informalfigure>
            <mediaobject>
               <imageobject>
                  <imagedata fileref="assets/owner-group-world.png"/>
               </imageobject>
            </mediaobject>
         </informalfigure>
         <informaltable>
            <tgroup cols="2">
               <thead>
                  <row>
                     <entry>
                        <para>Category</para>
                     </entry>
                     <entry>
                        <para>Description</para>
                     </entry>
                  </row>
               </thead>
               <tbody>
                  <row>
                     <entry>
                        <para>Owner</para>
                     </entry>
                     <entry>
                        <para>These permissions work for the owner of the resource</para>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <para>Group</para>
                     </entry>
                     <entry>
                        <para>These permissions work for the members of the group of the
                                resource</para>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <para>World</para>
                     </entry>
                     <entry>
                        <para>These permissions work for any user</para>
                     </entry>
                  </row>
               </tbody>
            </tgroup>
         </informaltable>
         <note>
            <para>Please be aware that permissions for collections are
                            <emphasis>NOT</emphasis> inherited by their sub-collections, i.e., write
                        permissions can be set for some sub-collections, but you must also have
                        write permissions for the parent collection for these to be
                        effective.</para>
         </note>
         <para>Using the Java Admin Client or the command line, you can list the permissions
                    assigned to each resource (this assumes the <literal>permissions</literal>
                    property in <literal>client.properties</literal> is set to
                        <literal>true</literal>). An example listing is shown below:</para>
         <example>
            <title>Resource Permission Settings</title>
            <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="listings/listing-13.txt"/>
         </example>
         <para>As shown on the left-hand side, the Java Admin Client displays resource permissions
                    in a format similar to the output of the Unix <literal>ls -l</literal> command:
                    a ten-character code. The first character represents the type of resource:
                        <literal>-</literal> (hyphen) for documents (files) and <literal>d</literal> for
                    collections. The next three characters are the permissions for the user: a
                        <literal>-</literal> (hyphen) is used for denied permissions,
                        <literal>r</literal> for read, <literal>w</literal> for write, and
                        <literal>x</literal> for execute. The next three characters (five through
                    seven) set the permissions for groups, and the last three for others (i.e.
                    anyone else who can access the database). Given the previous example, we can see
                    that all files except <literal>r_and_j.xml</literal> are owned by user "admin"
                    and group "dba".</para>
         <para>As mentioned in the previous section, the database root collection
                        <literal>/db</literal> initially has permissions set to
                        <literal>drwxr-xr-x</literal>, i.e. full access is granted to everyone. Also
                    note that <literal>-rw-r--r--</literal> is the default setting for all newly
                    created resources, i.e. the owner has read/write permissions but not execute,
                    and the group and others (world) has read permissions.</para>
         <sect3>
            <title>Changing Resource Permissions</title>

            <para>Permissions can be changed using either the <emphasis>Edit
                            Properties</emphasis> dialog box (shown below) in the Admin
                        Client or the <literal>chmod</literal> command in the shell window. The
                            <emphasis>Edit Properties</emphasis> dialog box is opened by selecting
                            <literal>Files</literal> »<literal>Resource
                            Properties</literal> from the menu, OR by clicking on the
                            <literal>Properties Icon</literal> (image with checkboxes) in the toolbar.
                        This dialog box shows permission settings for all database users and
                        groups.</para>
            <informalfigure>
               <mediaobject>
                  <imageobject>
                     <imagedata fileref="assets/client-6.png"/>
                  </imageobject>
               </mediaobject>
            </informalfigure>
            <note>
               <para>Please note that only the owner of a resource or members of the
                                <literal>dba</literal> group are allowed to change permissions. All other
                            users who attempt to change these settings will receive an error
                            message.</para>
            </note>
            <para>On the command line, you can use the <literal>chmod</literal> command to
                        change permissions. This command expects two parameters:</para>
            <variablelist spacing="compact">
               <varlistentry>
                  <term>chmod</term>
                  <listitem>
                     <para>Parameters:</para>
                     <orderedlist>
                        <listitem>
                           <para>Name of a resource or collection</para>
                        </listitem>
                        <listitem>
                           <para>Read, write and execute permissions to set or remove
                                                (<literal>+</literal> or <literal>-</literal>
                                            respectively, for the specified user, group, or other
                                            according to the following syntax:</para>
                        </listitem>
                     </orderedlist>
                     <programlisting>chmod [resource] [user|group|other]=[+|-][read|write|execute][, ...]</programlisting>
                  </listitem>
               </varlistentry>
            </variablelist>
            <para>For example, to grant the write permission to the group and deny all to
                        others, you may use:</para>
            <programlisting>chmod hamlet.xml group=+write,other=-read,-execute,-write</programlisting>
            <para>If you do not specify a resource in the first argument of the
                            <literal>chmod</literal> command, the permission string will be applied
                        to the current collection. This is an important feature if you want to
                        change permissions for the <literal>/db</literal> root collection, which
                        would otherwise not be possible. For example, to deny write permissions to
                        others for the entire database, change directory to the root collection
                        (i.e. enter <literal>cd ..</literal>) and enter:</para>
            <programlisting>chmod other=-write</programlisting>
         </sect3>
         <sect3>
            <title>Changing Resource Ownership</title>

            <para>Only the owner has full control over a resource, and it is sometimes
                        important to change this ownership. The Admin Client provides the
                            <literal>chown</literal> command to do this. The command expects three
                        arguments:</para>
            <variablelist spacing="compact">
               <varlistentry>
                  <term>chown</term>
                  <listitem>
                     <para>Arguments:</para>
                     <orderedlist>
                        <listitem>
                           <para>Name of the user.</para>
                        </listitem>
                        <listitem>
                           <para>Name of the group.</para>
                        </listitem>
                        <listitem>
                           <para>Name of the resource.</para>
                        </listitem>
                     </orderedlist>
                     <programlisting>chown [user] [group] [resource]</programlisting>
                  </listitem>
               </varlistentry>
            </variablelist>
            <para>For example, to change the owner of the file
                            <literal>r_and_j.xml</literal>, you would do the following:</para>
            <example>
               <title>Changing Ownership</title>
               <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="listings/listing-18.txt"/>
            </example>
         </sect3>
      </sect2>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

      <sect2 xml:id="ACLs">
         <title>Access Control Lists (ACL)</title>

         <para>To be written. More information about ACLs is available as <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.adamretter.org.uk/presentations/security-in-existdb_xml-prague_existdb_20120210.pdf">slides</link> (PDF) and a presentation on <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.youtube.com/watch?v=Z_Dryy9DtVo">YouTube</link>.</para>
      </sect2>
   </sect1>

   <!-- ================================================================== -->

   <sect1 xml:id="permission-checks">
      <title>Permission Checks</title>

      <para>Each operation in eXist-db enforces permission checks. The details of the
                permissions required for an operation are laid out below. These permissions should
                align with a strict Unix model, but if they are found to be incorrect or lacking, please
                let the project know immediately.</para>
      <table>
         <title>Document Permissions Matrix</title>

         <tgroup cols="3">
            <thead>
               <row>
                  <entry>
                     <para>Operation</para>
                  </entry>
                  <entry>
                     <para>Collection</para>
                  </entry>
                  <entry>
                     <para>Document</para>
                  </entry>
               </row>
            </thead>
            <tbody>
               <row>
                  <entry>
                     <para>Open Collection</para>
                  </entry>
                  <entry>
                     <para>--x</para>
                  </entry>
                  <entry>
                     <para>---</para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para>List Collection Contents</para>
                  </entry>
                  <entry>
                     <para>r-x</para>
                  </entry>
                  <entry>
                     <para>---</para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para>Add Document</para>
                  </entry>
                  <entry>
                     <para>-wx</para>
                  </entry>
                  <entry>
                     <para>---</para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para>Remove Document</para>
                  </entry>
                  <entry>
                     <para>-wx</para>
                  </entry>
                  <entry>
                     <para>---</para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para>Overwrite Existing Document</para>
                  </entry>
                  <entry>
                     <para>--x</para>
                  </entry>
                  <entry>
                     <para>-w- (or owner)</para>
                  </entry>
               </row>
            </tbody>
         </tgroup>
      </table>
      <table>
         <title>Document Copy/Move Permissions Matrix</title>

         <tgroup cols="5">
            <thead>
               <row>
                  <entry>
                     <para>Operation</para>
                  </entry>
                  <entry>
                     <para>Source Collection</para>
                  </entry>
                  <entry>
                     <para>Source Document</para>
                  </entry>
                  <entry>
                     <para>Destination Collection (if exists)</para>
                  </entry>
                  <entry>
                     <para>Destination Document (if exists)</para>
                  </entry>
               </row>
            </thead>
            <tbody>
               <row>
                  <entry>
                     <para>Copy Document</para>
                  </entry>
                  <entry>
                     <para>--x</para>
                  </entry>
                  <entry>
                     <para>r--</para>
                  </entry>
                  <entry>
                     <para>-wx (w only if destination document does not exist)</para>
                  </entry>
                  <entry>
                     <para>-w-</para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para>Move/Rename Document</para>
                  </entry>
                  <entry>
                     <para>-wx</para>
                  </entry>
                  <entry>
                     <para>--x (or owner)</para>
                  </entry>
                  <entry>
                     <para>-wx</para>
                  </entry>
                  <entry>
                     <para>-w-</para>
                  </entry>
               </row>
            </tbody>
         </tgroup>
      </table>
      <table>
         <title>Collection Permissions Matrix</title>

         <tgroup cols="5">
            <colspec colname="c1"/>
            <colspec colname="c2"/>
            <colspec colname="c3"/>
            <colspec colname="c4"/>
            <colspec colname="c5"/>
            <colspec colname="c6"/>
            <thead>
               <row>
                  <entry>
                     <para>Operation</para>
                  </entry>
                  <entry>
                     <para>Parent of Source Collection</para>
                  </entry>
                  <entry>
                     <para>Source Collection</para>
                  </entry>
                  <entry>
                     <para>Parent of Destination Collection</para>
                  </entry>
                  <entry>
                     <para>Destination Collection (if exists)</para>
                  </entry>
               </row>
            </thead>
            <tbody>
               <row>
                  <entry>
                     <para>Add Collection</para>
                  </entry>
                  <entry>
                     <para>---</para>
                  </entry>
                  <entry>
                     <para>---</para>
                  </entry>
                  <entry>
                     <para>-wx</para>
                  </entry>
                  <entry>
                     <para>---</para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para>Remove Collection</para>
                  </entry>
                  <entry>
                     <para>-wx</para>
                  </entry>
                  <entry>
                     <para>rwx (and on all sub-collections)</para>
                  </entry>
                  <entry>
                     <para>---</para>
                  </entry>
                  <entry>
                     <para>---</para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para>Copy Collection</para>
                  </entry>
                  <entry>
                     <para>---</para>
                  </entry>
                  <entry>
                     <para>r-x</para>
                  </entry>
                  <entry>
                     <para>---</para>
                  </entry>
                  <entry>
                     <para>---</para>
                  </entry>
               </row>
               <row>
                  <entry>
                     <para>Move/Rename Collection</para>
                  </entry>
                  <entry>
                     <para>-wx</para>
                  </entry>
                  <entry>
                     <para>-w-</para>
                  </entry>
                  <entry>
                     <para>---</para>
                  </entry>
                  <entry>
                     <para>-wx (When replacing an existing collection, then the permissions
                                for removing that collection must be met first).</para>
                  </entry>
               </row>
            </tbody>
         </tgroup>
      </table>
      <para>When copying a collection, permissions are checked for each sub-collection
                and resource.</para>
      <para>Copying a sub-collection requires <emphasis>r-x</emphasis> on the sub-collection,
                and <emphasis>rwx</emphasis> on the destination collection, and if the
                sub-collection already exists in the destination then <emphasis>r-x</emphasis> is required on
                that.</para>
      <para>Copying resources from a collection requires <emphasis>r--</emphasis> on the
                resource, and <emphasis>-w-</emphasis> on the destination resource if it exists,
                otherwise <emphasis>-w-</emphasis> on the destination collection.</para>
   </sect1>
</article>