<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng"
        schematypens="http://relaxng.org/ns/structure/1.0"?><?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" type="application/xml"
        schematypens="http://purl.oclc.org/dsdl/schematron"?><article xmlns="http://docbook.org/ns/docbook" version="5.0">
   <info>
      <title>Ant Tasks</title>
      <date>August 2012</date>
      <keywordset>
         <keyword>TBD</keyword>
      </keywordset>
   </info>

   <!-- ================================================================== -->

   <sect1>
      <title>Introduction</title>

      <para>eXist-db provides a library for the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://ant.apache.org">Ant</link>
            build tool to automate common tasks like backup/restore or importing a bunch of files.
            To use this library you need at least Ant 1.6. Ant 1.8.2 is included in the eXist-db
            v2.0 distribution (if you have installed the eXist-db source code). </para>
      <para>In your build file, import the eXist-db tasks as follows:</para>
      <example>
         <title>Import the Tasks</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-1.xml"/>
      </example>
      <para> The classpath has to be defined before as follows</para>
      <example>
         <title>Definition of Classpath</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-2.xml"/>
      </example>
      <note>
         <para>For a working example have a look into the file <literal>webapp/xqts/build.xml
                </literal>, which is used to prepare the database for running the xquery test
                suite.</para>
      </note>
      <para>All tasks share the following common attributes:</para>
      <variablelist spacing="compact">
         <varlistentry>
            <term>uri</term>
            <listitem>
               <para>An XMLDB URI specifying the database collection.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>ssl</term>
            <listitem>
               <para>Use SSL encryption when communicating with the database (default: false).</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>initdb</term>
            <listitem>
               <para>Setting this option to "true" will automatically
                    initialize a database instance if the uri points to an
                    embedded database.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>user</term>
            <listitem>
               <para>The user to connect with (default: guest).</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>password</term>
            <listitem>
               <para>Password for the user (default: guest).</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>failonerror</term>
            <listitem>
               <para>Whether or not a error should stop the build execution</para>
            </listitem>
         </varlistentry>
      </variablelist>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Storing Documents</title>

      <para>The store task uploads and stores the specified documents into
           the database. Documents are specified through one or more filesets or as single source file.
           The following attributes are recognized:
          </para>
      <example>
         <title>Storing Documents</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-3.txt"/>
      </example>
      <variablelist spacing="compact">
         <varlistentry>
            <term>createcollection</term>
            <listitem>
               <para>If set to "true", non-existing base collections will be automatically
                            created.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>createsubcollections</term>
            <listitem>
               <para>If set to "true", any non-existing sub-collections will
                      be automatically created.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>type</term>
            <listitem>
               <para>The type of the resource: either "xml" or "binary". If "binary",
                            documents will be stored as binary resources. If it is unset, the type
                            will be guessed from identified MIME type</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>defaultmimetype</term>
            <listitem>
               <para>The default MIME type to use when the resource MIME type cannot be
                            identified. If it is not set, binary (application/octet-stream) is the
                            default.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>forcemimetype</term>
            <listitem>
               <para>Use this attribute when you want to force an specific MIME type. You should also set
		      'type' attribute, because resource kind guessing is disabled in this mode.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>mimetypesfile</term>
            <listitem>
               <para>The mime-types.xml file used by Ant eXist-db extension to identify the
                            resource kind ("binary" or "xml") and MIME type of the documents to
                            store. If it is not set, it will use a default one which is either at
                            eXist-db HOME installation or bundled inside the Ant eXist-db
                            extension</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>srcfile</term>
            <listitem>
               <para>a single source file to store; use instead of filesets</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>permissions</term>
            <listitem>
               <para>The permissions to be applied to the resource, expressed in a Unix-style form, e.g. 'rwxr-xr-x'; permissions will be applied to the resource/collection after it is created.</para>
            </listitem>
         </varlistentry>
      </variablelist>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Removing Documents/Collections</title>

      <para>The remove task removes a single resource or collection from
            the collection specified in the uri attribute.</para>
      <example>
         <title>Remove a Resource</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-4.xml"/>
      </example>
      <example>
         <title>Remove a Collection</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-5.xml"/>
      </example>
      <variablelist spacing="compact">
         <varlistentry>
            <term>collection</term>
            <listitem>
               <para>The name of the collection which should be removed.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>resource</term>
            <listitem>
               <para>The name of the resource which should be removed.</para>
            </listitem>
         </varlistentry>
      </variablelist>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Creating Empty Collections</title>

      <para>The create task creates a single empty collection from
          the collection specified in the uri attribute.</para>
      <example>
         <title>Create a Collection</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-6.xml"/>
      </example>
      <variablelist spacing="compact">
         <varlistentry>
            <term>collection</term>
            <listitem>
               <para>The name of the sub-collection which should be created.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>permissions</term>
            <listitem>
               <para>The permissions to be applied to the resource, expressed in a Unix-style form, e.g. 'rwxr-xr-x'; permissions will be applied to the resource/collection after it is created.</para>
            </listitem>
         </varlistentry>
      </variablelist>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Check Existence of Resource/Collection</title>

      <para>The exist task is a condition that checks whether a resource or collection as
                specified in the uri attribute exists or not. An ant target can be executed
                conditionally depending on the property set or not set by the condition. </para>
      <example>
         <title>Check a Collection</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-7.xml"/>
      </example>
      <variablelist spacing="compact">
         <varlistentry>
            <term>resource</term>
            <listitem>
               <para>The name of the resource which should be checked.</para>
            </listitem>
         </varlistentry>
      </variablelist>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>List Resources/Collections</title>

      <para>The list task returns a list of all resources and/or conditions
            in the collection specified in the uri attribute.</para>
      <example>
         <title>List Resources</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-8.xml"/>
      </example>
      <example>
         <title>List Collections</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-9.xml"/>
      </example>
      <variablelist spacing="compact">
         <varlistentry>
            <term>resources</term>
            <listitem>
               <para>If "true" lists resources</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>collections</term>
            <listitem>
               <para>If "true" lists collections</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>separator</term>
            <listitem>
               <para>separator character for the returned list, default is ","</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>outputproperty</term>
            <listitem>
               <para>name of a new ant property that will contain the result</para>
            </listitem>
         </varlistentry>
      </variablelist>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Copy a Resource/Collection</title>

      <para>The copy task copies a resource or collection to a new destination.</para>
      <example>
         <title>Copy a Resource</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-10.xml"/>
      </example>
      <example>
         <title>Copy a Collection</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-11.xml"/>
      </example>
      <variablelist spacing="compact">
         <varlistentry>
            <term>resource</term>
            <listitem>
               <para>The name of the resource which should be copied.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>collection</term>
            <listitem>
               <para>The name of the collection which should be copied.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>destination</term>
            <listitem>
               <para>The name of the destination collection to copy to.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>name</term>
            <listitem>
               <para>The new name of the resource or collection in the destination.</para>
            </listitem>
         </varlistentry>
      </variablelist>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Move a Resource/Collection</title>

      <para>The move task moves a resource or collection to a new destination.</para>
      <example>
         <title>Move a Resource</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-12.xml"/>
      </example>
      <example>
         <title>Move a Collection</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-13.xml"/>
      </example>
      <variablelist spacing="compact">
         <varlistentry>
            <term>resource</term>
            <listitem>
               <para>The name of the resource which should be moved.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>collection</term>
            <listitem>
               <para>The name of the collection which should be moved.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>destination</term>
            <listitem>
               <para>The name of the destination collection to move to.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>name</term>
            <listitem>
               <para>The new name of the resource or collection in the destination.</para>
            </listitem>
         </varlistentry>
      </variablelist>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Process an XPath Expression</title>

      <para>The xpath task executes an XPath expression.
             The output of the script is discarded, except when a destination file
             or output property is specified.
           </para>
      <para>The XPath may either be specified through the query attribute
             or within the text content of the element. A optional namespace may be used
             for the query.
           </para>
      <example>
         <title>Process an XPath</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-14.xml"/>
      </example>
      <para>The query task accepts the following attributes:</para>
      <variablelist spacing="compact">
         <varlistentry>
            <term>query</term>
            <listitem>
               <para>The query to be processed.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>resource</term>
            <listitem>
               <para>query a resource instead of a collection.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>count</term>
            <listitem>
               <para>If "true" the number of found results is returned
                       instead of the results itself.
                     </para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>outputproperty</term>
            <listitem>
               <para>return the results as a string in a new property.
                       In this case only the text of the result is returned.
                     </para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>destDir</term>
            <listitem>
               <para>write the results of the query to a destination file.
                       In this case the whole XML fragments of the result is written to the file.
                       Care should be taken to get a wellformed document (e.g. one root tag).
                     </para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>namespace</term>
            <listitem>
               <para>XML namespace to use for the query (optional).</para>
            </listitem>
         </varlistentry>
      </variablelist>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Process an XQuery Expression</title>

      <para>The xquery task executes an XQuery expression. This task is
            primarily intended for transformations. The output of the script is
            discarded when no destination file or output property is specified.</para>
      <para>The XQuery may either be specified through an URI, the query attribute
            or within the text content of the element. External variables 
	    declared in the XQuery can be set via one or more nested
	    &lt;variable&gt; elements. You can also use the loadfile task to load
	    the query from a file as in the following example:</para>
      <example>
         <title>Process an XQuery in file</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-15.txt"/>
      </example>
      <example>
         <title>Process an XQuery from URI</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-16.xml"/>
      </example>
      <para>The XQuery task accepts the following attributes in 
	    addition to the common ones:</para>
      <variablelist spacing="compact">
         <varlistentry>
            <term>query</term>
            <listitem>
               <para>The query to be processed.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>queryUri</term>
            <listitem>
               <para>The query to be processed specified as a URI.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>outputproperty</term>
            <listitem>
               <para>return the results as a string in a new property.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>destfile</term>
            <listitem>
               <para>write the results of the query to a destination file.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>queryfile</term>
            <listitem>
               <para>read the query from a file.</para>
            </listitem>
         </varlistentry>
      </variablelist>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Extract a Resource/Collection</title>

      <para>The extract task dumps a resource or collection to a file or directory.</para>
      <example>
         <title>Extract a Resource</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-17.xml"/>
      </example>
      <example>
         <title>Extract a Collection</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-18.xml"/>
      </example>
      <variablelist spacing="compact">
         <varlistentry>
            <term>resource</term>
            <listitem>
               <para>The name of the resource which should be extracted.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>sub-collections</term>
            <listitem>
               <para>If "true" all sub-collections of the specified collection
                      are extracted as well
                    </para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>destfile</term>
            <listitem>
               <para>The name of the destination file to extract to.
                      Only supported when a resource is extracted.
                    </para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>destdir</term>
            <listitem>
               <para>The name of a destination directory to extract to.
                      Has to be used when extracting a collection.
                    </para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>createdirectories</term>
            <listitem>
               <para>If "true" directories for sub-collections will be created
                      Otherwise all extracted resources are written to the destination
                      directory directly.
                    </para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>type</term>
            <listitem>
               <para>Type of the resource to extract.
                      Only "xml" is supported currently.
                    </para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>overwrite</term>
            <listitem>
               <para>Set to true to force overwriting of files.
                    </para>
            </listitem>
         </varlistentry>
      </variablelist>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Backup</title>

      <para>Creates a backup of the specified database collection on the
            local disk. For example:</para>
      <example>
         <title>Backing up the System Collection</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-19.xml"/>
      </example>
      <para>creates a backup of the system collection.</para>
      <variablelist spacing="compact">
         <varlistentry>
            <term>dir</term>
            <listitem>
               <para>The directory where backup files will be stored.</para>
            </listitem>
         </varlistentry>
      </variablelist>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Restore</title>

      <para>Restores database contents from a backup. The backup is read
			from location specified by the <literal>dir</literal> or
			<literal>file</literal> attributes. The <literal>dir</literal> attribute should point to
			a directory containing a valid backup, i.e. a directory with a
			__contents__.xml backup descriptor in it (e.g.
			<literal>/home/me/Backup/090228/db</literal>). The
			<literal>file</literal> attribute should specify a zip archive which
			contains the backup. The base attribute specifies the base XMLDB
			URI (i.e. the URI without collections) used for the restore.  The
			collection names will be read from the __contents__.xml
			file.</para>
      <variablelist spacing="compact">
         <varlistentry>
            <term>dir</term>
            <listitem>
               <para>A directory containing a __content__.xml file to be used
                          for the restore.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>file</term>
            <listitem>
               <para>A zip file which contains the backup to be restored.
						</para>
            </listitem>
         </varlistentry>
      </variablelist>
      <para>The following example restores the /db/home collection:</para>
      <example>
         <title>Restore a Collection</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-20.xml"/>
      </example>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>List Groups</title>

      <para>
            This task lists all groups defined in eXist-db.
          </para>
      <example>
         <title>Write list of groups to output property</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-21.xml"/>
      </example>
      <variablelist spacing="compact">
         <varlistentry>
            <term>outputproperty</term>
            <listitem>
               <para>Name of new property to write the output to.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>separator</term>
            <listitem>
               <para>Separator character for output, by default "," (comma).</para>
            </listitem>
         </varlistentry>
      </variablelist>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>List Users</title>

      <para>
             This task lists all users defined in eXist-db.
           </para>
      <example>
         <title>Write list of users to output property</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-22.xml"/>
      </example>
      <variablelist spacing="compact">
         <varlistentry>
            <term>outputproperty</term>
            <listitem>
               <para>Name of new property to write the output to.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>separator</term>
            <listitem>
               <para>Separator character for output, by default ",".</para>
            </listitem>
         </varlistentry>
      </variablelist>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Lock Resource</title>

      <para>
              This task locks a resource for a user.
            </para>
      <example>
         <title>Lock Resource</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-23.xml"/>
      </example>
      <variablelist spacing="compact">
         <varlistentry>
            <term>resource</term>
            <listitem>
               <para>Name of resource to lock.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>name</term>
            <listitem>
               <para>Name of user to lock the resource for.</para>
            </listitem>
         </varlistentry>
      </variablelist>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Add User</title>

      <para>
                This task adds a user.
            </para>
      <example>
         <title>Add User</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-24.xml"/>
      </example>
      <variablelist spacing="compact">
         <varlistentry>
            <term>name</term>
            <listitem>
               <para>Name of the new user.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>home</term>
            <listitem>
               <para>Name of collection that is home collection.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>secret</term>
            <listitem>
               <para>The password of the new user.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>primaryGroup</term>
            <listitem>
               <para>Name of primary group of the new user.</para>
            </listitem>
         </varlistentry>
      </variablelist>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Remove User</title>

      <para>
                This task removes a user.
            </para>
      <example>
         <title>Remove User</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-25.xml"/>
      </example>
      <variablelist spacing="compact">
         <varlistentry>
            <term>name</term>
            <listitem>
               <para>Name of the user to remove.</para>
            </listitem>
         </varlistentry>
      </variablelist>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Change password of an User</title>

      <para>
                This task changes the password of an user.
            </para>
      <example>
         <title>Change Password</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-26.xml"/>
      </example>
      <variablelist spacing="compact">
         <varlistentry>
            <term>name</term>
            <listitem>
               <para>Name of the user to change the password for.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>secret</term>
            <listitem>
               <para>The new password of the user.</para>
            </listitem>
         </varlistentry>
      </variablelist>
      <note>
         <para> You can of course also change your own password.</para>
      </note>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Add Group</title>

      <para>
                This task adds a group.
            </para>
      <example>
         <title>Add Group</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-27.xml"/>
      </example>
      <variablelist spacing="compact">
         <varlistentry>
            <term>name</term>
            <listitem>
               <para>Name of the new group.</para>
            </listitem>
         </varlistentry>
      </variablelist>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Remove Group</title>

      <para>
                This task removes a group.
            </para>
      <example>
         <title>Remove Group</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-28.xml"/>
      </example>
      <variablelist spacing="compact">
         <varlistentry>
            <term>name</term>
            <listitem>
               <para>Name of the group to remove.</para>
            </listitem>
         </varlistentry>
      </variablelist>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Change resource permissions (chmod)</title>

      <para> This task changes the permissions of a resource or collection.</para>
      <example>
         <title>Chmod</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-29.xml"/>
      </example>
      <variablelist spacing="compact">
         <varlistentry>
            <term>resource</term>
            <listitem>
               <para>Name of resource to modify. If no resource has been specified, chmod will
                            operate on the collection as defined by the uri.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>permissions</term>
            <listitem>
               <para>Permission modification string. Use either Unix-style syntax, e.g.:</para>
               <programlisting>rwxrwx---</programlisting>
               <para>or additive/subtractive syntax, e.g.:</para>
               <programlisting>[user|group|other]=[+|-][read|write|execute]</programlisting>
               <para>For example, to set read and write permissions for the group, but not for others:</para>
               <programlisting>group=+read,+write,other=-read,-write</programlisting>
               <para>The new settings are or'ed with the existing settings.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>mode</term>
            <listitem>
               <para>Permission modification string. Use either Unix-style syntax, e.g.:</para>
               <programlisting>rwxrwx---</programlisting>
               <para>or additive/subtractive syntax, e.g.:</para>
               <programlisting>[user|group|other]=[+|-][read|write|execute]</programlisting>
               <para>For example, to set read and write permissions for the group, but not for others:</para>
               <programlisting>group=+read,+write,other=-read,-write</programlisting>
               <para>The new settings are or'ed with the existing settings.</para>
               <para>NOTE: The mode attribute on the chown ANT task is deprecated in favor
                       of the "permissions" attribute. In the case that both "mode" and
                       "permissions" are specfied, then the permissions attribute is the only
                       one used.</para>
            </listitem>
         </varlistentry>
      </variablelist>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Change Owner of resource/collection (chown)</title>

      <para>
              This task changes the owner of a resource or collection.
            </para>
      <example>
         <title>Chown</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-36.xml"/>
      </example>
      <variablelist spacing="compact">
         <varlistentry>
            <term>name</term>
            <listitem>
               <para>Name of user to own the resource/collection.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>group</term>
            <listitem>
               <para>Name of group to own the resource/collection.</para>
            </listitem>
         </varlistentry>
      </variablelist>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Database Shutdown</title>

      <para>The shutdown task is required if you use the database in embedded
            mode. It will try to shut down the database instance listening at
            the provided URI.</para>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Example Ant script - Simple Data Migration</title>

      <para>This example Ant script shows how to copy data from two different instances of eXist-db (remote or local).</para>
      <para>To use supply your own values for the source and target user, pass, and url properties. Run the default target 'migrate'
            to copy data from one instance of eXist-db to another.</para>
      <example>
         <title>Simple Data Migration</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-37.xml"/>
      </example>
      <para> You can find this Ant script under the samples/ant directory.</para>
   </sect1>
</article>