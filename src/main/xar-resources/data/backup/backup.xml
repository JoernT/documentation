<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng"
        schematypens="http://relaxng.org/ns/structure/1.0"?><?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" type="application/xml"
        schematypens="http://purl.oclc.org/dsdl/schematron"?>
<article xmlns="http://docbook.org/ns/docbook" version="5.0">
   <info>
      <title>Database Backup and Restore</title>
      <date>27-11-2017</date>
      <keywordset>
         <keyword>TBD</keyword>
      </keywordset>
   </info>

   <!-- ================================================================== -->

   <sect1>
      <title>Abstract</title>

      <para>This section discusses eXist-db's database backup/restore procedures. eXist-db
                provides different methods for creating backups, which will be explained
                below.</para>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Backup Format</title>

      <para>During backup, eXist-db exports the contents of its database (as standard XML files)
                to a hierarchy of directories on the hard drive. This hierarchy is organized
                according to the organization of collections in the database.</para>
      <para>The location of the backup files depends on backup method (s.b.). Backups via the dashboard, 
                or via XQuery write backups into the <code>export</code> directory inside the data directory of the eXist instance. 
                The Emergency Backup Tool writes into <code>$EXIST_HOME/export</code> unless configured otherwise.</para>
      <para>Other files stored during backup include index configuration files and user
                settings. Resource and collection metadata is exported to a special XML file, called
                <literal>__contents__.xml</literal>, which lists information including the
                resource type, owner, modification date and/or the permissions assigned to a
                resource. You will find one <literal>__contents__.xml</literal> file in each
                directory created by the backup. This descriptor file is required to restore the
                backup.</para>
      <para>Since eXist-db uses an open XML format rather than a proprietary format for its
                database files, users can manually modify files in the backup directories without
                requiring special software. Any changes made to these files are reflected in the
                database with a restore or once the data is imported to another database
                system.</para>
      <para>It is even possible to directly edit user data and permissions stored in the file
                <literal>/db/system/users.xml</literal>. This is particularly useful when
                making global changes to the user database. For example, to reset the passwords for
                all your users, you can simply edit the file <literal>users.xml</literal> by
                removing the <literal>password</literal> attribute, or set it to a default value and
                restore the document.</para>
      <para>During backups eXist first runs a consistency check on the database, 
                trying to identify potential issues in the internal storage structure. 
                Based on the result of the check, the backup task attempts to rescue as much data as possible, working around any detected issues.</para>
      <note>
         <para> When migrating to a new eXist-db version, take care to use a version of the
                    client corresponding to your server version. Usually, the backup process is
                    backwards compatible. However, using a newer client version to create the backup
                    from a server running an older version may sometimes lead to unexpected
                    problems.</para>
         <para>The backup files include a report. Normally this just contains the list of collections which were backed up.If you notice any warnings or errors, 
                    it is especially important that you perform a “full restore” of your backed-up data onto the new installation of eXist, 
                    as described in the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="backup.xml#restore">following steps.</link>
                </para>
      </note>
      <important>
         <para>Due to limitations of the ZIP format, please make sure the size of your zipped backup does
                not exceed 4 gigabytes. All backup methods support backups to the file system as an alternative.</para>
      </important>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Backup Methods</title>

      <para>There are two main methods for creating a backup:</para>
      <variablelist spacing="compact">
         <varlistentry>
            <term>Client-side</term>
            <listitem>
               <para>You can use the Java admin client or a small command line utility to
                            create a backup of the data on the server. In this case, the client
                            controls the backup process. The server is not blocked and continues to
                            accept requests from other clients. Other users can modify the db while
                            the backup is running, so logical dependencies between different
                            resources may not be preserved correctly.</para>
               <para>Client-side backups are <emphasis>not safe</emphasis>. The client uses
                            the XML:DB API to access the db. This means that it cannot backup
                            documents or collections if they are damaged in any way.</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>Server-side</term>
            <listitem>
               <para>Server-side backups are usually run through eXist-db's job scheduler,
                            though they can also be triggered via the web interface. This type of
                            backup extracts the data directly from the low-level database files. It
                            is thus much faster then a client-side backup. It also supports
                            incremental backups.</para>
               <para>It is guaranteed that the database is in a consistent state while the
                            backup is running. Possible corruptions in the db will be detected and
                            the backup process will try to work around them. In many cases, damaged
                            resources can at least be partially recovered.</para>
            </listitem>
         </varlistentry>
      </variablelist>
      <para>The format of the generated backup archives will be the same for both backup
                methods. They can all be restored via the standard Java client.</para>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Server-side Backup</title>

      <para>This is now the recommended backup method. To guarantee consistency, server-side
                backups are always executed as system tasks, which means that the database will be
                switched to a protected service mode before the backup starts. eXist-db will wait for
                all pending transactions to complete before it enters protected mode. A database
                checkpoint will be performed and the backup task is executed. While the system task
                is running, no new transactions will be allowed. Concurrent requests by other
                clients will be blocked and added to the internal queue. Once the backup is
                complete, the database will switch back to normal service and all locks will be
                released.</para>
      <para>You can trigger the backup via the Dashboard:</para>
      <informalfigure>
         <mediaobject>
            <imageobject>
               <imagedata fileref="assets/Backup.png"/>
            </imageobject>
         </mediaobject>
      </informalfigure>
      <para>Clicking the <literal>Trigger</literal> button will schedule a single backup
                task. The server will wait for all running transactions to return before it executes
                the task. You can click on <literal>Refresh</literal> to update the view, which
                lists all backup archives currently available within the standard backup directory.
                Click on the name of an archive to download it.</para>
      <para>Beginning with version 1.2.5, eXist-db can also create <emphasis>incremental
                    backups</emphasis>. Only resources which were modified since the last backup are
                archived.</para>
      <para>All backups will be stored in ZIP format into a directory <literal>export/</literal> below the main data directory, which means <literal>webapp/WEB-INF/data/export/</literal> by default (unless you configured a
                different data directory in <literal>conf.xml</literal>).</para>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Automatic Consistency Check</title>

      <para>The system task runs a consistency and sanity check on the database before backing
                it up. Reports of this check are written into the same directory as the backup
                archive. The last report can also be viewed via JMX (see below).</para>
      <para>The consistency check will first check the collection hierarchy, then scan through
                the stored node tree of every document in the db, testing node properties like the
                node's id, child count, attribute count and node relationships. Contrary to normal
                database operations, the different dbx files are checked independently. This means
                that even if a collection is no longer readable, the tool will still be able to scan
                the documents in the damaged collection.</para>
      <para>The backup task uses the information provided by the consistency check to work
                around damages in the db. It tries to export as much data as possible, even if parts
                of the collection hierarchy are corrupted or documents are damaged:</para>
      <itemizedlist>
         <listitem>
            <para>Descendant collections will be exported properly even if their ancestor
                        collection is corrupted</para>
         </listitem>
         <listitem>
            <para>Documents which are intact but belong to a destroyed collection will be
                        stored into a special collection <literal>/db/lost_and_found</literal>
                    </para>
         </listitem>
         <listitem>
            <para>Damaged documents are detected and are removed from the backup</para>
         </listitem>
      </itemizedlist>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

      <sect2>
         <title>Scheduling Backups and Consistency Checks</title>

         <para>The core class for the server-side backup as well as consistency checks is
                    called <literal>ConsistencyCheckTask</literal>. It can be registered as a
                    system task with eXist-db's <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="configuration.xml#N104CF">scheduler</link>. To do this, add the following definition to the scheduler
                    section in <literal>conf.xml</literal>:</para>
         <example>
            <title>Job Definition in conf.xml</title>
            <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-1.xml"/>
         </example>
         <para>This will launch a consistency check and database backup every 12 hours,
                    starting at midnight. The time/frequency of the backup is specified in the
                    <literal>cron-trigger</literal> attribute. The syntax is borrowed from the
                    Unix cron utility, though there are small differences. Please consult the Quartz
                    documentation about <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.quartz-scheduler.org/documentation/quartz-2.x/tutorials/tutorial-lesson-06.html">CronTrigger</link> configuration.</para>
         <para>The task accepts the following parameters:</para>
         <variablelist spacing="compact">
            <varlistentry>
               <term>output</term>
               <listitem>
                  <para>The directory to which the backup is written. Relative paths are
                                interpreted relative to eXist-db's main data directory.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>backup</term>
               <listitem>
                  <para>Create a full database backup in addition to running the system
                                checks. Setting this to "no" will not create a backup - unless
                                errors were detected during the consistency check! If errors are
                                found, the task will always try to generate an emergency
                                backup.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>zip</term>
               <listitem>
                  <para>If set to "yes", the backup will be written into a zip archive. For larger databases, please
                            make sure the generated archive is smaller than 4 gigabytes. Due to limitations of the zip format,
                            archives larger than 4 gigabytes may not be readable. In this case, use a backup to the file system
                            instead.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>incremental</term>
               <listitem>
                  <para>Created backups will be incremental. Only resources which were
                                modified since the last backup will be saved. The first backup will
                                always be a full backup, subsequent backups will be
                                incremental.</para>
                  <para>Note: you can schedule more than one backup job. For example, an
                                incremental backup could be done multiple times a day while a full
                                backup is created only once during the night </para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>incremental-check</term>
               <listitem>
                  <para>By default, no consistency check will be run during an incremental
                                backup. For big databases, the consistency check may take too long,
                                so it should be done for full backups only. Set
                                <literal>incremental-check</literal> to "yes" to run a consistency
                                check during incremental backups.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>max</term>
               <listitem>
                  <para>If incremental backups are enabled, create a full backup every
                                <literal>max</literal> backup runs. If you set the parameter to
                                e.g. 2, you will get a full backup after two incremental
                                backups.</para>
               </listitem>
            </varlistentry>
         </variablelist>
      </sect2>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

      <sect2>
         <title>Triggering Backups from XQuery</title>

         <para>System jobs can also be triggered from an XQuery using the <literal>system:trigger-system-task</literal> function defined in the "system"
                    module: </para>
         <example>
            <title>Triggering a Backup From XQuery</title>
            <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xquery" xlink:href="listings/listing-2.txt"/>
         </example>
         <para>The function will schedule a backup to be executed as soon as possible.</para>
      </sect2>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

      <sect2 xml:id="consistency-check">
         <title>Emergency Export Tool</title>

         <informalfigure>
            <mediaobject>
               <imageobject>
                  <imagedata fileref="assets/exportgui.png"/>
               </imageobject>
            </mediaobject>
         </informalfigure>
         <para>eXist provides a graphical interface to the consistency check and backup
                    utilities which can be used in case of an emergency, in particular if the
                    database does not start up properly anymore. The tool needs direct access to the
                    database files, so any running database instance has to be stopped before
                    launching the GUI.</para>
         <para>Use the following command line to start the utility:</para>
         <programlisting>java -jar start.jar org.exist.backup.ExportGUI</programlisting>
         <para>If you installed the eXist distribution using the installer, a shortcut to
                    this should have been placed into the start menu, so you don't need to type
                    above command.</para>
         <para>On a headless system you can use the command-line version instead:</para>
         <programlisting>java -jar start.jar org.exist.backup.ExportMain</programlisting>
         <para>Call it with parameter <literal>-h</literal> to get a list of possible
                    options.</para>
         <para>For every check run, an error report will be written into the directory
                    specified in <literal>Output Directory</literal>. If you clicked on
                    <literal>Check Export</literal>, the utility will also export the
                    database into a zip file in the same directory. This backup can be restored via
                    the standard <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#restore">backup/restore tools</link>.</para>
      </sect2>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

      <sect2>
         <title>Using JMX to View Check Reports</title>

         <para>If Java Management Extensions (JMX) are enabled in the Java VM that is running
                    eXist, you can use a JMX client to see the latest consistency check reports. The
                    screenshot shows jconsole, which is included with the Java 5 and 6 JDKs.</para>
         <informalfigure>
            <mediaobject>
               <imageobject>
                  <imagedata fileref="assets/jconsole.png"/>
               </imageobject>
            </mediaobject>
         </informalfigure>
         <para>eXist also includes a command-line JMX client. Call it with parameter
                    <literal>-s</literal> to see the latest consistency report:</para>
         <programlisting>java -jar start.jar org.exist.management.client.JMXClient -s</programlisting>
         <para>This may produce output as shown below:</para>
         <example>
            <title>JMXClient Output</title>
            <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="listings/listing-6.txt"/>
         </example>
         <para>You can also subscribe to the notifications made available by the SanityReport
                    MBean to be informed of sanity check results. Please consult the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="jmx.xml">documentation</link> on how to configure JMX.</para>
      </sect2>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Client-side Backup</title>

      <para>You can either use the Java-based Admin Client, or the backup command line
                utility.</para>
      <para>If you are using the Admin Client, do the following:</para>
      <orderedlist>
         <listitem>
            <para>Select either the Backup Icon (arrow pointed upward) in the toolbar OR
                        <literal>Tools » Backup</literal> from the menu.</para>
         </listitem>
         <listitem>
            <para>From the <literal>Collection</literal> drop-down menu, select the
                        collection to backup. To backup the entire database, select <literal>/db</literal>. Otherwise, select the topmost collection that should be
                        stored. Note, however, that user data and permissions will only be exported
                        if you backup the entire database.</para>
            <informalfigure>
               <mediaobject>
                  <imageobject>
                     <imagedata fileref="assets/backup1.png"/>
                  </imageobject>
               </mediaobject>
            </informalfigure>
         </listitem>
         <listitem>
            <para>In the <literal>Backup-Directory</literal> field, enter the full directory
                        path to the where you want the backup database files to be stored or the
                        path to a zip file into which the backup will be written. In general, if the
                        file name ends with <literal>.zip</literal>, the client will attempt to
                        write to a ZIP. Otherwise, it tries to create the specified
                        directory.</para>
         </listitem>
         <listitem>
            <para>Click <literal>OK</literal>.</para>
         </listitem>
      </orderedlist>
      <para>If you are using the command-line utility for the backup/restore, do the
                following:</para>
      <para>To launch the utility, do ONE of the following:</para>
      <itemizedlist>
         <listitem>
            <para>start either the <literal>bin/backup.sh</literal> (Unix), OR the
                        <literal>bin/backup.bat</literal> (Windows/DOS) script file</para>
         </listitem>
         <listitem>
            <para>OR enter on the command-line:</para>
            <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="listings/listing-7.txt"/>
            <para>To view the all of the available options for this command, use the
                        <literal>-h</literal> parameter.</para>
         </listitem>
      </itemizedlist>
      <para>Use the <literal>-b</literal> parameter to indicate the <emphasis>collection
                    path</emphasis>, and the <literal>-d</literal> parameter to indicate the
                <emphasis>target directory</emphasis> on your system. You can also specify the
                current admin username using the <literal>-u</literal> parameter, and the admin
                password using the <literal>-p</literal> parameter. For example, to backup the
                entire database on a Unix system to the target directory <literal>/var/backup/hd060501</literal>, you would enter the following:</para>
      <programlisting>bin/backup.sh -u admin -p admin-pass -b /db -d /var/backup/hd060501</programlisting>
      <para>By default, the utility connects to the database at the URI: <literal>xmldb:exist://localhost:8080/exist/xmlrpc</literal>. If you want to backup a
                database at a different location, specify its <literal>XML:DB URI</literal>
                (excluding any collection path) using the <literal>-ouri</literal> parameter.
                For example, the following backup on a Unix Tomcat system running on port 80 specifies the database URI
                <literal>xmldb:exist://192.168.1.2:80/xmlrpc</literal>
            </para>
      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="listings/listing-9.txt"/>
      <note>
         <para>Default settings for the user, password or server URIs can also be set via the
                    <literal>backup.properties</literal> file.</para>
      </note>
   </sect1>

   <!-- ================================================================== -->

   <sect1 xml:id="restore">
      <title>Restoring the Database</title>



      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

      <sect2>
         <title>Important Note about the Restore Process</title>

         <para>Restoring from a backup (or parts of it) does not mean that the existing data
                    in the current database instance will be deleted entirely. The restore process
                    will upload the collections and documents contained in the backup. Collections
                    and documents which exist in the database but are not part of the backup will
                    not be modified.</para>
         <para>This is a feature, not a bug. It allows us to restore selected parts of the
                    database without touching the rest.</para>
         <para>If you really need to restore into a fresh, completely clean database, proceed
                    as follows:</para>
         <orderedlist>
            <listitem>
               <para>Stop the running eXist database instance</para>
            </listitem>
            <listitem>
               <para>Change into directory <literal>EXIST_HOME/webapp/WEB-INF/data</literal> or another directory you
                            specified as data directory in the configuration (conf.xml).</para>
            </listitem>
            <listitem>
               <para>Remove all <literal>.dbx</literal>, <literal>.lck</literal> and
                            <literal>.log</literal> files. This means removing all your old
                            data! eXist will recreate those files upon the next restart.</para>
            </listitem>
            <listitem>
               <para>Start eXist again and launch a restore.</para>
            </listitem>
         </orderedlist>
      </sect2>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

      <sect2>
         <title>Restore Using the Java Client</title>

         <para>To restore the database files from a backup, you can again use either the
                    Admin Client, or the backup command line utility.</para>
         <note>
            <para>For eXist 1.2.x, the restore tool can not directly read from a zipped
                        backup. You have to extract it before restoring. Version 1.4 can handle the
                        zip.</para>
            <para>Also, if you experience any issues with bad characters in collection
                        names, use the standard Java <literal>jar</literal> tool to unpack the
                        zip. Contrary to other zip tools, this utility handles character encodings
                        correctly.</para>
         </note>
         <para>If you are using the Admin Client, do the following:</para>
         <orderedlist>
            <listitem>
               <para>Select either the Restore Icon (arrow pointed downward) in the toolbar
                            OR <literal>Tools » Restore</literal> from the menu.</para>
            </listitem>
            <listitem>
               <para>The dialog box shown below will then prompt you to select the backup
                            descriptor <literal>__contents__.xml</literal> from the topmost
                            directory you want restored. To restore the entire database, select the
                            <literal>__contents__.xml</literal> from the <literal>db/</literal> directory.</para>
               <informalfigure>
                  <mediaobject>
                     <imageobject>
                        <imagedata fileref="assets/backup2.png"/>
                     </imageobject>
                  </mediaobject>
               </informalfigure>
               <para>eXist 1.3 allows to directly select the ZIP archive of a
                            backup.</para>
            </listitem>
            <listitem>
               <para>A second dialog box will then prompt you for an admin password to use
                            for the restore process. This password is required ONLY IF the password
                            of the "admin" user set during the backup differs from the log-in
                            password for the current session. (If you provide an incorrect password,
                            the restore will be aborted.) If the passwords are different, note that
                            restoring the user settings from the backup will cause the current user
                            password to become invalid. </para>
            </listitem>
            <listitem>
               <para>If the restore was accepted, a progress dialog box will display the
                            restored files:</para>
               <informalfigure>
                  <mediaobject>
                     <imageobject>
                        <imagedata fileref="assets/backup3.png"/>
                     </imageobject>
                  </mediaobject>
               </informalfigure>
            </listitem>
         </orderedlist>
         <sect3>
            <title>Using the Command Line</title>

            <para>To restore from a backup using the command-line utility, follow the
                        instructions above for launching <literal>bin/backup.sh</literal> (Unix),
                        OR the <literal>bin/backup.bat</literal> (Windows/DOS) script files.
                        Include the <literal>-r</literal> parameter, and the full path of the
                        <literal>__contents__.xml</literal> file to restore. As with the Admin
                        Client, if the backup uses a different password for the "admin" user than
                        the current session, you must specify the backup password using the
                        <literal>-P</literal>. For Example:</para>
            <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="listings/listing-10.txt"/>
         </sect3>
      </sect2>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

      <sect2>
         <title>Repairing the Package Repository After Restore</title>

         <para>After a complete restore, your package repository will probably be out of
                    sync. The dashboard will not show all the packages you had previously installed,
                    even though their data collections have hopefully been restored (into
                        <literal>/db/apps</literal> unless you changed the default repository
                    root).</para>
         <para>This happens because the package registry is stored on the file system and
                    is not part of a backup. During a restore, only the contents of your packages are
                    written back into the database.</para>
         <para>A manual "repair" step is required to get the package repository into
                    sync again. The repair procedure is implemented as an XQuery module, which you can
                    run via eXide or the Java admin client. The module provides two
                    functions:</para>
         <variablelist spacing="compact">
            <varlistentry>
               <term>repair:clean-all()</term>
               <listitem>
                  <para>Unlinks all currently installed packages from the package manager without 
                                removing deployed data from the db.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>repair:repair()</term>
               <listitem>
                  <para>Scan the app root collection in the db for deployed packages and register
                                each of them with the package repository. This reconstructs the metadata for
                                the package. The data stored in the db will not be modified in any way.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>repair:repair ($collection)</term>
               <listitem>
                  <para>Only try to repair the application whose deployed data is stored in the given
                                collection.</para>
               </listitem>
            </varlistentry>
         </variablelist>
         <para>After a complete restore into a clean database, the clean-all and repair functions would
                    typically be combined in the following XQuery:</para>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xquery" xlink:href="listings/listing-11.txt"/>
      </sect2>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Backing Up Single Apps</title>

      <para>Creating a backup of a single expath application or library package is rather
                straightforward within eXide. Either use:</para>
      <itemizedlist>
         <listitem>
            <para>the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="development-starter.xml#D1.4.16">synchronize
                            feature</link> to write the package contents to a directory on disk,
                        or</para>
         </listitem>
         <listitem>
            <para>call <literal>Application</literal> / <literal>Download
                            App</literal> to retrieve a <literal>.xar</literal> package which
                        can be deployed into another eXist-db instance</para>
         </listitem>
      </itemizedlist>
   </sect1>

   <!-- ================================================================== -->

   <sect1 xml:id="standalone">
      <title>Standalone Backup/Restore</title>



      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

      <sect2>
         <title>Standalone Backup/Restore on Server platforms</title>

         <para>The above instructions assume that you have a standard eXist installation directory in place, either from a release package or a full build environment. That is not
                    always the case on remotely deployed server instances that might be running using only an eXist WAR file in an application server (eg. Tomcat).</para>
         <para>To support such deployment scenarios, and make it easier to do restores local to the deployed server, there is an ant build target called:
                    </para>
         <programlisting>backrest</programlisting>
         <para>Building the backrest target will create a fully-self contained zip file in the backrest directory that can be copied to a remote server and used to do both restores and backups local to that server.
                </para>
         <para>Just unzip the backrest zip file, preserviding subdirectories, and execute either the backup.bat or backup.sh scripts per the prior instructions and parameter usage.
                </para>
      </sect2>
   </sect1>
</article>