<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng"
        schematypens="http://relaxng.org/ns/structure/1.0"?><?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" type="application/xml"
        schematypens="http://purl.oclc.org/dsdl/schematron"?><article xmlns="http://docbook.org/ns/docbook" version="5.0">
   <info>
      <title>A Short Introduction to the Atom Publishing Protocol Atom Services An Example Configuring the Atom Servlet Extensions</title>
      <date>September 2009</date>
      <keywordset>
         <keyword>TBD</keyword>
      </keywordset>
   </info>

   <!-- ================================================================== -->

   <sect1>
      <title>Introduction</title>

      <para>The <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.ietf.org/rfc/rfc5023.txt">Atom
          Publishing Protocol</link> is a new protocol being developed at the
          <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.ietf.org/">IETF</link> as part of their Atom
              Publishing Format and Protocol working group that lets you
          manipulate Atom feeds over a REST-style HTTP interface. The RFC is still
          in draft status but is nearing completion. Though Atom is often associated
          with newsfeeds, it can be used for a much wider range of applications.</para>
      <para>eXist-db provides an implementation of the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.ietf.org/rfc/rfc5023.txt">Atom
              Publishing Protocol</link> sitting on top of the database. Feed and entry
              data is stored into special collections. Our wiki and blog system,
              <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://code.google.com/p/atomicwiki">AtomicWiki</link>, which 
              powers the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://atomic.exist-db.org/blogs/eXist/">eXist Wiki</link>
              is completely based on eXist's Atom support.</para>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Creating and Manipulating Atom Entries</title>

      <para>To create an entry in the feed, you just POST an [atom:]entry
      element to the collection url. This creates a new entry in the feed and
      possibly returns a new representation of the entry. For example, to
      create a simple annotation entry (possibly a blog post), you'd formulate
      an [atom:]entry element using the [atom:]content element and post that
      to the server.</para>
      <example>
         <title>Create Entry</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="listings/listing-1.txt"/>
      </example>
      <note>
         <para>It is important to specify the correct Content-Type in the HTTP header.
		If the content type is not application/atom+xml, the server will just
		store the resource as a document into the existing feed collection and
		add an entry to the feed which links to the new resource.</para>
      </note>
      <para>The server then responds with the created entry, a location header
      to the created entry, or both.</para>
      <example>
         <title>Created Response</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="listings/listing-2.txt"/>
      </example>
      <para>In the above example response, notice the 'edit' relation link.
      This link will let you change this entry in the future. A PUT request on
      that link URL will update that entry in the feed. Similarly, a DELETE
      request on that link URL will delete the entry.</para>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Uploading Resources</title>

      <para>Collections can also contain non-atom entry resources that are
      also represented by an [atom:]entry in the feed. These are created by a
      POST to the same collection URL. The response is an [atom:]entry
      element.</para>
      <example>
         <title>Image Upload</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="listings/listing-3.txt"/>
      </example>
      <para>In the above request, a title for the entry can be requested when
      the resource is created. The server then responds with the created
      entry, a location header to the created entry, or both.</para>
      <example>
         <title>Upload Response</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="listings/listing-4.txt"/>
      </example>
      <para>In the above example response, notice the 'edit-media' relation
      link in addition to the 'edit' relation link. The 'edit-media' link
      relation lets you update the image while the 'edit' link relation lets
      you change the entry as in the previous section. Also, a delete on
      either editing link relation will delete the resource and its
      corresponding entry.</para>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Introspection</title>

      <para>To get started with an Atom Publishing Protocol enabled service
      you need to know the collection URL. A GET request on that collection
      URL will return the feed and that same URL is used to create entries.
      One way to bootstrap a client and get that collection URL is through
      service introspection.</para>
      <para>Given a service URL, a GET request will return an XML document
      that enumerates the workspaces and collections available to use. This is
      a simple document of the following structure:</para>
      <example>
         <title>An Introspection Document</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-5.xml"/>
      </example>
      <para>Each 'collection' element represents a feed that can be modified.
      The colleciton URL is specified in the 'href' attribute on that
      element.</para>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Setting Permissions</title>

      <para>When creating a feed or entry, you can specify which permissions should
              be applied to the newly created resource within eXist. For this, the entry
              or feed document should contain an empty element, <tag>exist:permissions</tag>,
              in the "exist" namespace.</para>
      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-6.xml"/>
      <para>where <literal>owner</literal> and <literal>group</literal> should be valid database
              users/groups and <literal>mode</literal> is an octal number defining the permissions
              to be set. Please refer to the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="security.xml#octal">Security Guide</link>
              for further information.</para>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Modules</title>

      <para>The Atom services are provided by modules loaded into the Atom
      service. This service is normally provided at the server's '/atom' path
      (e.g. http://localhost:8088/atom/). Every module has a name and to
      access the module the name is appended to the atom service path. For
      example, for the 'content' module, the URL
      http://localhost:8088/atom/content would be used.</para>
      <para>Following the module name is a collection or resource path. That
      appened path maps to a collection or resource in the database with the
      /atom/{name} prefix removed. For example,
      'http://localhost:8088/atom/content/myfeed' is the '/myfeed' collection
      while 'http://localhost:8088/atom/content' is the root collection of the
      database.</para>
      <para>The Atom Publishing Protocol makes a distinction between a
      collection and the feed that represents it. In eXist, a similar
      distinction exists in that a collection is a set of resources and not a
      feed. The exception is that the Atom implementation makes one XML
      document special and uses that to represent the collection as a
      feed.</para>
      <para>Currently, if a collection is an also an Atom feed, a document
      named '.feed.atom' must exist in the collection. If so, the Atom
      interface servlet will treat the collection as a Atom feed that can be
      manipulated. If that document does not exist, a module may respond with
      a failure status code.</para>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>The Content Module</title>

      <para>Getting the feed is a simple GET request with the "/atom/content"
      prefix on the collection path. For example, if you have a collection at
      '/my/blog', then the path '/atom/content/my/blog' will return the
      feed.</para>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>The Edit Module</title>

      <para>The 'edit' module allows you to create new feeds and manipulate
      existing feeds. This module implements the full Atom Publishing protocol
      except for the service introspection part.</para>
      <para>In addition to implementing the Atom Publishing Protocol, you can
      create a manipulate feeds on collections. To create a new collection or
      turn an existing collection into a feed, POST an [atom:]feed element to
      the collection path with a /atom/edit/ prefix. This will create a new
      collection feed using the feed title, etc. specified in the post.</para>
      <para>To change the metadata associated with the collection's feed (e.g.
      the feed title), make a PUT request to the collection URL with the
      updated [atom:]feed element without any [atom:]entry (these will be
      ignored). That will change the feed's metadata.</para>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>The Introspect Module</title>

      <para>Service introspection is provided by the 'introspect' module. A
      GET request on any collection path prefixed with /atom/introspect will
      return a service introspection document.</para>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>The Query Module</title>

      <para>The 'query' module allows you to query your collection's feed by a
      POST of an XQuery. The POST is sent to the collection path prefixed with
      /atom/query/ and is run against the collection's feed document. This
      module is how both the Introspect and Topic modules are implemented. For
      example, if you want to generate a feed of all the feeds in all
      sub-collections, the following query could be sent:</para>
      <example>
         <title>A Feed Query</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-7.xml"/>
      </example>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>The Topic Module</title>

      <para>The 'topic' module is an example module that generates a list of
      subtopics give a certain feed. A GET request will return a feed with the
      collection path's feed, an entry for each ancestor feed, and an entry
      for each sub-collection but not any sub-collections of sub-collections.
      This is useful for generation feed navigation.</para>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Example Scenario</title>

      <para>A blog feed can easily be implemented using the Atom services.
      We'll create a blog where all the entries are in the feed as well as any
      resources (e.g. images) are also in the same feed.</para>
      <para>In this system, we want a /{username}/blog to be the user's blog.
      That way we can search against all the user blogs.</para>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Setting Up the Blog Feeds</title>

      <para>We'll want a top-level blog so we can post queries. This feed can
      be empty and is created as:</para>
      <example>
         <title>Create Users Feed</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="listings/listing-8.txt"/>
      </example>
      <para>When a user is created, we'll have to post a new [atom:]feed
      element to the user directory and blog:</para>
      <example>
         <title>Create User</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="listings/listing-9.txt"/>
      </example>
      <example>
         <title>Create User Blog</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="listings/listing-10.txt"/>
      </example>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Creating Entries</title>

      <para>Now a user can post a new entry to their blog:</para>
      <example>
         <title>Create a New Entry</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="listings/listing-11.txt"/>
      </example>
      <para>Or do whatever they like with their favorite Atom Publishing
      Protocol client.</para>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Querying the Blog</title>

      <para>A service provider can query their blog to display the entries for
      a particular month:</para>
      <example>
         <title>Find Blog Entries</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="listings/listing-12.txt"/>
      </example>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Enabling Atom Services.</title>

      <para>The Atom Servlet must be enabled to have Atom services provided by
      the standalone configuration. This is done by adding or enabled the Atom
      Servlet implementation in server.xml:</para>
      <example>
         <title>Addition for server.xml</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-13.xml"/>
      </example>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Configuration</title>

      <para>By default, without any configuration file, all the atom modules
      are provided. If there is an atom-services.xml document in the eXist
      home directory, that configuration will be used instead. </para>
      <example>
         <title>atom-services.xml</title>
         <programlisting xmlns:xlink="http://www.w3.org/1999/xlink" language="xml" xlink:href="listings/listing-14.xml"/>
      </example>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

      <sect2>
         <title>Adding a Custom Module</title>

         <para>A custom module, implemented in Java, can be configured by
        adding a
        <code>{http://www.exist-db.org/Vocabulary/AtomConfiguration/2006/1/0}module</code>
        element. The 'name' specifies the module name that will be used in the
        URL path and the 'class' attribute specifies the implementation class.
        This class must implement
        <code>com.exist.atom.AtomModule</code>.</para>
      </sect2>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

      <sect2>
         <title>Adding a Query Module</title>

         <para>A query can be registered as module by adding a
        <code>{http://www.exist-db.org/Vocabulary/AtomConfiguration/2006/1/0}module</code>
        element without the 'class' attribute specified. The 'name' specifies
        the module name that will be used in the URL path.</para>
         <para>As children of the element, a
        <code>{http://www.exist-db.org/Vocabulary/AtomConfiguration/2006/1/0}method</code>
        element can be specifed for each HTTP method for which a query should
        be associated. This element has three attributes: </para>
         <variablelist spacing="compact">
            <varlistentry>
               <term>type</term>
               <listitem>
                  <para>The HTTP method to which the query should be
              associated--must be one of GET, PUT, POST, HEAD, or
              DELETE.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>query</term>
               <listitem>
                  <para>A reference to the query source (a relative URL
              value).</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>from-classpath</term>
               <listitem>
                  <para>A boolean value where 'true' indicates that the query
              should be loaded as a resource off the classpath.</para>
               </listitem>
            </varlistentry>
         </variablelist>
      </sect2>
   </sect1>

   <!-- ================================================================== -->

   <sect1>
      <title>Setting permissions when creating feeds/entries</title>

      <para>When creating a new feed or entry, you can specify
                access permissions as well as an owner and owner group
                for the new resource. This is done by including a special
                <tag>exist:permissions</tag> element in the posted
                feed or entry document:</para>
      <programlisting>&lt;exist:permissions mode="0755" owner="editor" group="users"/&gt;</programlisting>
      <para>The <literal>mode</literal> attribute specifies the permissions to be
                assigned to the resource. The attribute value has to be an octal number
                or a string describing the permissions to set, using the syntax:</para>
      <programlisting>[user|group|other]=[+|-][read|write|update][, ...]</programlisting>
      <para>The <literal>owner</literal> attribute specifies the user which will own
                all resources associated to the feed or entry. Parameter <literal>group</literal>
                specifies the user group.</para>
   </sect1>
</article>